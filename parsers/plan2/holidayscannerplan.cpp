#line 2 "holidayscannerplan.cpp"

#line 4 "holidayscannerplan.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 200
#define YY_END_OF_BUFFER 201
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[941] =
    {   0,
        0,    0,  201,  199,    3,    4,    5,  199,  199,    5,
      199,   10,   10,   10,   10,   10,   10,   41,  199,   42,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,    5,    3,    4,   38,    0,   11,
        0,    1,   43,   10,    0,    0,    0,    0,    0,   39,
       37,   40,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  128,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   18,   17,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   15,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   16,    0,
        0,    0,    0,    0,    0,    0,   44,    0,    2,   45,
       46,   47,   48,   49,    0,    0,    0,    0,   51,    0,
      114,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   13,    0,  189,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   60,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   29,  112,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  101,    0,    0,
        0,    0,  183,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  187,  123,    0,
        0,    0,    0,    0,    0,  188,    0,    0,    0,    0,
       32,    0,    0,    0,    0,    0,   34,   14,    0,    0,
        0,    0,  116,  129,   86,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  125,    0,    0,    0,
       62,    0,    0,   61,    0,    0,    0,    0,    0,    0,
        0,   50,    0,    0,    0,    0,  170,    0,    0,    0,
      186,    0,    0,    0,    0,    0,    0,    0,    0,    8,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   19,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  106,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   80,    0,    0,
        0,    0,    0,    0,    0,    0,   22,    0,    0,    0,
        0,    0,  130,   53,    0,   59,    0,    0,    0,    0,
        0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   12,    0,    0,   49,   45,    0,
        0,    0,   30,    0,    0,  107,  113,    0,    0,   99,

        0,  139,    0,    0,    0,    0,    0,  196,    0,    0,
        0,   79,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   58,    0,    0,    0,   20,    0,    0,    0,    0,
        0,  124,    0,    0,    0,    0,    0,   85,   77,    0,
        0,    0,    0,  169,    0,    0,    0,    0,    0,   93,
       92,    0,    0,  146,    0,    0,  141,    0,    0,    0,
      110,    0,    0,    0,    0,    0,    0,    0,   27,    0,
      122,  126,   21,    0,    0,    0,    0,  127,    0,  121,
       47,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       35,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      131,    0,    0,  166,   63,  190,   52,    0,    0,    0,
        0,   75,    0,    0,    0,    0,   24,  191,    0,    0,
        0,   48,   72,  105,    0,    0,   78,  117,    0,    0,
      179,    0,   55,    0,    0,  167,    0,  120,    0,    0,
        0,   26,    0,    0,    0,    0,   81,    0,   87,    0,
       68,  184,    0,  108,    0,    0,    0,    0,    0,    0,
        0,   25,    0,    0,   89,    0,    0,    0,  115,    0,
        0,    0,    0,    0,   46,    0,    0,  147,    0,    0,
      197,    0,    0,    0,    0,   74,  100,    0,   76,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   31,    0,    0,    0,    0,    0,    0,    0,
      163,    0,    0,    0,  160,    6,    0,    0,    0,    0,
        0,    0,    0,    0,  119,    0,   56,    0,    0,  182,
        0,    0,    0,  103,   33,    0,    0,    0,  104,    0,
        0,   65,    0,  109,    0,    0,    0,   84,   91,  171,
        0,    0,    0,    0,  148,  178,    0,    0,    0,    0,
      137,    0,  149,    0,    0,    0,   98,    0,    0,    0,
      118,    0,   69,    0,    0,   36,  102,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   67,    0,  192,    0,    0,   57,

        0,  175,    0,    0,    0,    0,    7,   23,  111,  173,
       97,  140,   66,    0,    0,    0,   83,    0,   90,    0,
        0,  177,   73,    0,  193,    0,  164,  172,    0,    0,
        0,   71,   95,  161,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  134,    0,  132,    0,    0,    0,
      165,  174,    0,    0,   96,  180,   54,    0,    0,  162,
        0,    0,    0,    0,   94,    0,    0,   64,  185,  176,
        0,    0,   70,    0,    0,    0,    0,    0,    0,    0,
      198,    0,  138,  136,    0,  168,    0,    0,    0,    0,
        0,   88,    0,  195,   82,  142,    0,    0,  150,    0,

      158,    0,    0,    0,    0,  157,    0,  133,    0,    9,
        0,    0,    0,  181,    0,  151,    0,  154,    0,  156,
        0,  135,  194,    0,    0,    0,  143,    0,    0,    0,
        0,  144,    0,  153,  152,  155,  159,    0,  145,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    1,    7,
        7,    7,    7,    1,    7,    7,    7,    9,   10,   11,
       12,   13,   14,    9,    9,    9,    9,   15,    1,   16,
       17,   18,    7,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,    1,   42,   43,
        7,    1,    7,    1,    1,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,    1,
       67,   68,    1,   69,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[944] =
    {   0,
        0,  298,  287, 1938,  281,  277,  261,  259,  241, 1938,
      226,   61,   67,   73,   79,   85,   97,  215,  210,  168,
      141,   94,   86,   99,  191,  197,  128,  160,  169,  155,
      233,  102,  224,  242,   95,  282,   78,  248,  327,  373,
       95,  247,  270,  103,  166,  166,  159, 1938,  150, 1938,
      151, 1938, 1938,  329,   96,  148,  149,  156,  187, 1938,
     1938, 1938,  195,  196,  185,  201,  232,  243,  277,  276,
      282, 1938,  290,  284,  287,  304,  312,  302,  328,  318,
      336,  317,  367,  324,  325,  325,  326,  345,  346,  347,
      374,  365,  383,  384,  366,  380,  377,  387,  375,  385,

      418,  386, 1938,  396,  423,  414,  419,  428,  416,  420,
      442,  417,  425,  441,  459,  457,  457,  460,  442,  459,
      471,  463,  462,  465, 1938,  483,  506,  486,  488,  472,
      514,  485,  507,  521,  512,  524,  547,  555,  554,  510,
      534,  526,  559,  569,  567,  591,  547,  555,  591,  598,
      596,  611,  599,  600,  612,  604, 1938,  133, 1938, 1938,
     1938, 1938, 1938, 1938,  605,  602,  617,  625, 1938,  618,
     1938,  631,  613,  617,  626,  628,  646,  650,  650,  648,
      653,  638,  649,  651,  647,  662, 1938,  666,  662,  651,
      668,  661,  658,  675,  668,  664,  662,  667,  669,  674,

      682,  699,  702,  701,  684,  699,  704,  695,  714,  708,
      699,  710,  703,  721,  702,  715,  749,  721,  718,  712,
      716,  727,  731,  743,  748,  736,  742,  754,  761,  744,
      758,  764, 1938,  752,  774,  750,  771,  769,  770,  775,
      772,  783,  792,  795,  788,  795,  784,  796,  797,  803,
      809,  796,  799,  806,  809,  803,  821,  809,  811,  812,
      831,  825,  834,  838,  834, 1938, 1938,  849,  844,  833,
      840,  842,  853,  841,  854,  868,  857,  864,  866,  868,
      859,  871,  855,  870,  858,  863,  864, 1938,  884,  875,
      885,  902, 1938,  896,  887,  901,  889,  892,  898,  902,

      895,  916,  921,  901,  902,  911,  932, 1938,  915,  909,
      924,  927,  937,  934,  934, 1938,  953,  937,  938,  947,
     1938,  960,  961,  943,  956,  947, 1938, 1938,  956,  952,
      970,  967, 1938, 1938, 1938,  959,  959,  953,  981,  963,
      977,  969,  971,  992,  985,  987,  988,  982, 1000,  987,
      993, 1006,  994,  991, 1006, 1016, 1938, 1007, 1019, 1020,
     1938, 1021, 1018, 1938, 1005, 1018, 1028, 1023, 1030, 1030,
     1020, 1938, 1019, 1030, 1049, 1039, 1938, 1049, 1054, 1048,
     1938, 1049, 1056, 1044, 1044, 1040, 1066, 1068, 1052, 1938,
     1052, 1058, 1060, 1072, 1075, 1069, 1065, 1080, 1084, 1078,

     1078, 1092, 1086, 1095, 1089, 1104, 1099, 1938, 1106, 1098,
     1091, 1092, 1102, 1116, 1117, 1116, 1120, 1104, 1101, 1106,
     1113, 1117, 1938, 1129, 1134, 1149, 1121, 1139, 1120, 1133,
     1132, 1135, 1142, 1146, 1139, 1161, 1162, 1164, 1142, 1164,
     1150, 1167, 1151, 1161, 1155, 1159, 1173, 1938, 1180, 1177,
     1184, 1186, 1188, 1180, 1189, 1202, 1938, 1196, 1190, 1198,
     1203, 1203, 1204, 1938, 1214, 1938, 1209, 1205, 1200, 1207,
     1217, 1222, 1938, 1202, 1209, 1214, 1231, 1217, 1237, 1232,
     1229, 1232, 1247, 1237, 1938, 1236, 1254, 1938, 1938, 1248,
     1234, 1241, 1938, 1244, 1262, 1938, 1938, 1247, 1244, 1938,

     1268, 1938, 1256, 1262, 1254, 1259, 1270, 1938, 1269, 1271,
     1283, 1938, 1263, 1275, 1290, 1288, 1292, 1292, 1283, 1297,
     1293, 1938, 1288, 1290, 1306, 1938, 1288, 1289, 1311, 1299,
     1314, 1938, 1318, 1316, 1317, 1318, 1316, 1938, 1938, 1319,
     1311, 1333, 1321, 1938, 1324, 1320, 1322, 1349, 1346, 1938,
     1938, 1348, 1342, 1938, 1354, 1338, 1938, 1357, 1357, 1358,
     1938, 1350, 1351, 1353, 1368, 1361, 1366, 1371, 1938, 1372,
     1938, 1938, 1938, 1373, 1355, 1358, 1365, 1938, 1372, 1938,
     1938, 1369, 1383, 1389, 1396, 1402, 1403, 1404, 1387, 1394,
     1938, 1402, 1392, 1401, 1414, 1394, 1418, 1398, 1402, 1438,

     1938, 1399, 1423, 1938, 1938, 1938, 1938, 1411, 1431, 1415,
     1434, 1938, 1415, 1436, 1435, 1451, 1938, 1938, 1445, 1451,
     1438, 1938, 1938, 1938, 1449, 1443, 1938, 1938, 1448, 1449,
     1938, 1441, 1938, 1466, 1449, 1938, 1466, 1938, 1470, 1466,
     1473, 1938, 1457, 1481, 1470, 1463, 1938, 1484, 1938, 1490,
     1938, 1938, 1492, 1938, 1492, 1482, 1493, 1489, 1503, 1490,
     1486, 1938, 1489, 1490, 1938, 1498, 1493, 1501, 1938, 1519,
     1503, 1518, 1503, 1522, 1938, 1522, 1525, 1938, 1512, 1512,
     1938, 1523, 1527, 1525, 1546, 1938, 1938, 1530, 1938, 1542,
     1544, 1553, 1531, 1545, 1534, 1550, 1558, 1559, 1545, 1559,

     1584, 1557, 1938, 1560, 1565, 1569, 1568, 1565, 1580, 1590,
     1938, 1596, 1582, 1593, 1938, 1938, 1586, 1585, 1601, 1607,
     1602, 1588, 1612, 1614, 1938, 1616, 1938, 1620, 1615, 1938,
     1622, 1622, 1614, 1938, 1938, 1619, 1634, 1626, 1938, 1628,
     1625, 1938, 1639, 1938, 1631, 1627, 1645, 1938, 1938, 1938,
     1636, 1633, 1631, 1647, 1938, 1938, 1655, 1634, 1656, 1657,
     1938, 1662, 1938, 1664, 1666, 1653, 1938, 1663, 1670, 1653,
     1938, 1677, 1938, 1676, 1684, 1938, 1938, 1668, 1683, 1673,
     1673, 1687, 1696, 1698, 1694, 1695, 1690, 1697, 1700, 1692,
     1698, 1709, 1714, 1716, 1938, 1712, 1938, 1709, 1710, 1938,

     1713, 1938, 1712, 1722, 1734, 1724, 1938, 1938, 1938, 1938,
     1938, 1938, 1938, 1722, 1741, 1739, 1938, 1731, 1938, 1746,
     1749, 1938, 1938, 1733, 1938, 1735, 1938, 1938, 1753, 1745,
     1755, 1938, 1938, 1938, 1734, 1749, 1761, 1761, 1757, 1754,
     1770, 1771, 1769, 1758, 1938, 1768, 1938, 1775, 1777, 1788,
     1938, 1938, 1777, 1778, 1938, 1938, 1938, 1785, 1800, 1938,
     1777, 1792, 1798, 1788, 1938, 1793, 1805, 1938, 1938, 1938,
     1807, 1803, 1938, 1811, 1809, 1806, 1803, 1808, 1810, 1804,
     1938, 1819, 1938, 1938, 1823, 1938, 1832, 1821, 1824, 1818,
     1835, 1938, 1824, 1938, 1938, 1938, 1833, 1842, 1938, 1831,

     1938, 1852, 1853, 1854, 1851, 1938, 1849, 1938, 1856, 1938,
     1848, 1862, 1864, 1938, 1858, 1938, 1862, 1938, 1862, 1938,
     1868, 1938, 1938, 1873, 1865, 1881, 1938, 1883, 1871, 1870,
     1879, 1938, 1879, 1938, 1938, 1938, 1938, 1885, 1938, 1938,
      102,  101,   99
    } ;

static yyconst flex_int16_t yy_def[944] =
    {   0,
      940,    1,  940,  940,  940,  940,  940,  941,  942,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  943,  940,  940,  940,  941,  940,
      942,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  943,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,    0,
      940,  940,  940
    } ;

static yyconst flex_int16_t yy_nxt[2008] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   10,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,    4,   41,
       42,   43,    4,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,    4,   41,   42,   43,    4,   44,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  158,

      133,   51,   49,   55,   56,   54,   54,   54,   54,   54,
       54,   79,   74,  151,   57,  124,   75,   82,   80,   76,
      113,   83,   58,   77,  114,  133,  125,   81,   55,   56,
      126,   84,   78,  160,   59,  159,   79,   74,  151,   57,
      124,   75,   82,   80,   76,  113,   83,   58,   77,  114,
       97,  125,   81,   52,   50,  126,   84,   78,  160,   59,
       63,   47,   64,   98,   65,   66,   99,   46,  159,  161,
      162,  157,   67,  106,   68,   97,   69,   70,  100,   71,
       72,  163,  101,   73,   62,   63,  102,   64,   98,   65,
       66,   99,  103,  107,  161,  162,  108,   67,  106,   68,

      104,   69,   70,  100,   71,   72,  163,  101,   73,   85,
      105,  102,  164,  165,  166,   92,   86,  103,  107,   93,
       87,  108,  167,   94,   88,  104,   61,   89,   90,   95,
       91,   60,   96,   53,   85,  105,  168,  164,  165,  166,
       92,   86,  115,   52,   93,   87,  116,  167,   94,   88,
      117,  109,   89,   90,   95,   91,  118,   96,  110,  111,
      120,  168,  119,   50,  121,  112,  134,  115,  122,  152,
      135,  116,  153,  169,  123,  117,  109,   48,  170,   47,
      136,  118,   46,  110,  111,  120,  940,  119,  154,  121,
      112,  134,  155,  122,  152,  135,  171,  153,  169,  123,

      127,  172,  156,  170,  128,  136,  173,  129,  174,  175,
      176,  130,   45,  154,  940,  940,  940,  155,  131,  132,
      940,  171,  177,  180,  940,  127,  172,  156,  940,  128,
      178,  173,  129,  174,  175,  176,  130,   54,   54,   54,
       54,   54,   54,  131,  132,  137,  181,  177,  180,  138,
      179,  182,  139,  140,  184,  178,  183,  141,  185,  142,
      189,  190,  940,  191,  192,  143,  940,  193,  940,  194,
      137,  181,  195,  940,  138,  179,  182,  139,  140,  184,
      940,  183,  141,  185,  142,  189,  190,  186,  191,  192,
      143,  144,  193,  187,  194,  145,  196,  195,  146,  147,

      197,  148,  198,  188,  201,  149,  202,  199,  203,  204,
      205,  150,  186,  211,  940,  206,  144,  212,  187,  200,
      145,  196,  207,  146,  147,  197,  148,  198,  188,  201,
      149,  202,  199,  203,  204,  205,  150,  208,  211,  209,
      206,  213,  212,  214,  200,  215,  219,  207,  216,  217,
      218,  220,  221,  940,  210,  224,  225,  940,  940,  227,
      222,  226,  208,  940,  209,  940,  213,  240,  214,  940,
      215,  219,  228,  216,  217,  218,  220,  221,  223,  210,
      224,  225,  234,  229,  227,  222,  226,  230,  236,  241,
      231,  238,  240,  235,  232,  239,  242,  228,  237,  243,

      233,  244,  245,  223,  246,  940,  255,  234,  229,  253,
      256,  260,  230,  236,  241,  231,  238,  940,  235,  232,
      239,  242,  254,  237,  243,  233,  244,  245,  261,  246,
      247,  255,  257,  266,  253,  256,  260,  248,  249,  258,
      262,  250,  251,  267,  252,  940,  259,  254,  263,  280,
      940,  264,  281,  261,  940,  247,  282,  257,  266,  940,
      265,  940,  248,  249,  258,  262,  250,  251,  267,  252,
      268,  259,  276,  263,  280,  271,  264,  281,  269,  272,
      277,  282,  293,  294,  270,  265,  273,  283,  274,  278,
      284,  275,  940,  279,  285,  268,  295,  276,  940,  286,

      271,  287,  288,  269,  272,  277,  289,  293,  294,  270,
      296,  273,  283,  274,  278,  284,  275,  290,  279,  285,
      297,  295,  298,  291,  286,  301,  287,  288,  302,  292,
      304,  289,  299,  300,  307,  296,  308,  309,  303,  310,
      305,  306,  290,  311,  312,  297,  940,  298,  291,  313,
      301,  315,  316,  302,  292,  304,  317,  299,  300,  307,
      318,  308,  309,  303,  310,  305,  306,  319,  311,  312,
      320,  314,  321,  322,  313,  325,  315,  316,  323,  324,
      326,  317,  327,  328,  329,  318,  330,  331,  332,  333,
      334,  335,  319,  336,  337,  320,  314,  321,  322,  338,

      325,  339,  340,  323,  324,  326,  341,  327,  328,  329,
      342,  330,  331,  332,  333,  334,  335,  343,  336,  337,
      344,  345,  348,  346,  338,  347,  339,  340,  349,  351,
      352,  341,  353,  354,  355,  342,  356,  350,  357,  358,
      359,  360,  343,  364,  365,  344,  345,  348,  346,  366,
      347,  367,  368,  349,  351,  352,  361,  353,  354,  355,
      369,  356,  350,  357,  358,  359,  360,  362,  364,  365,
      370,  363,  371,  372,  366,  373,  367,  368,  374,  375,
      378,  361,  379,  376,  380,  369,  377,  381,  385,  386,
      387,  388,  362,  389,  390,  370,  363,  371,  372,  382,

      373,  391,  383,  374,  375,  378,  384,  379,  376,  380,
      392,  377,  381,  385,  386,  387,  388,  393,  389,  390,
      394,  395,  396,  397,  382,  400,  391,  383,  398,  402,
      399,  384,  404,  401,  403,  392,  405,  406,  407,  408,
      409,  410,  393,  411,  412,  394,  395,  396,  397,  413,
      400,  414,  415,  398,  402,  399,  416,  404,  401,  403,
      417,  405,  406,  407,  408,  409,  410,  418,  411,  412,
      419,  420,  421,  422,  413,  423,  414,  415,  424,  425,
      430,  416,  431,  940,  432,  417,  433,  426,  434,  435,
      436,  437,  418,  427,  438,  419,  420,  421,  422,  428,

      423,  439,  440,  424,  425,  430,  441,  431,  429,  432,
      442,  433,  426,  434,  435,  436,  437,  443,  427,  438,
      444,  446,  447,  448,  428,  449,  439,  440,  450,  451,
      452,  441,  453,  429,  454,  442,  457,  445,  458,  455,
      459,  463,  443,  940,  464,  444,  446,  447,  448,  465,
      449,  456,  460,  450,  451,  452,  466,  453,  467,  454,
      468,  457,  445,  458,  455,  459,  463,  461,  462,  464,
      469,  470,  471,  472,  465,  473,  456,  460,  474,  475,
      476,  466,  477,  467,  478,  468,  479,  480,  481,  482,
      483,  484,  461,  462,  485,  469,  470,  471,  472,  486,

      473,  487,  488,  474,  475,  476,  489,  477,  490,  478,
      491,  479,  480,  481,  482,  483,  484,  492,  493,  485,
      494,  495,  496,  497,  486,  498,  487,  488,  499,  500,
      501,  489,  502,  490,  503,  491,  504,  505,  506,  507,
      508,  509,  492,  493,  510,  494,  495,  496,  497,  511,
      498,  512,  513,  499,  500,  501,  514,  502,  515,  503,
      516,  504,  505,  506,  507,  508,  509,  517,  518,  510,
      519,  520,  521,  522,  511,  523,  512,  513,  524,  525,
      526,  514,  527,  515,  528,  516,  529,  530,  531,  532,
      533,  534,  517,  518,  535,  519,  520,  521,  522,  536,

      523,  537,  538,  524,  525,  526,  539,  527,  540,  528,
      541,  529,  530,  531,  532,  533,  534,  542,  543,  535,
      544,  545,  546,  547,  536,  548,  537,  538,  549,  550,
      551,  539,  552,  540,  553,  541,  554,  555,  556,  557,
      558,  559,  542,  543,  560,  544,  545,  546,  547,  561,
      548,  562,  563,  549,  550,  551,  566,  552,  567,  553,
      568,  554,  555,  556,  557,  558,  559,  564,  565,  560,
      569,  570,  571,  572,  561,  573,  562,  563,  574,  575,
      576,  566,  577,  567,  578,  568,  579,  580,  581,  582,
      583,  584,  564,  565,  585,  569,  570,  571,  572,  586,

      573,  587,  588,  574,  575,  576,  589,  577,  590,  578,
      591,  579,  580,  581,  582,  583,  584,  592,  593,  585,
      594,  595,  596,  597,  586,  598,  587,  588,  600,  599,
      601,  589,  602,  590,  603,  591,  604,  605,  606,  607,
      608,  609,  592,  593,  610,  594,  595,  596,  597,  611,
      598,  612,  613,  600,  599,  601,  614,  602,  615,  603,
      616,  604,  605,  606,  607,  608,  609,  617,  618,  610,
      619,  620,  621,  622,  611,  623,  612,  613,  624,  625,
      626,  614,  627,  615,  628,  616,  629,  630,  631,  632,
      633,  634,  617,  618,  635,  619,  620,  621,  622,  636,

      623,  637,  638,  624,  625,  626,  639,  627,  640,  628,
      641,  629,  630,  631,  632,  633,  634,  642,  643,  635,
      644,  645,  646,  647,  636,  648,  637,  638,  649,  650,
      651,  639,  652,  640,  653,  641,  654,  655,  656,  657,
      658,  659,  642,  643,  660,  644,  645,  646,  647,  661,
      648,  662,  663,  649,  650,  651,  664,  652,  665,  653,
      666,  654,  655,  656,  657,  658,  659,  667,  668,  660,
      669,  670,  671,  672,  661,  673,  662,  663,  674,  675,
      676,  664,  677,  665,  678,  666,  679,  680,  681,  682,
      683,  684,  667,  668,  685,  669,  670,  671,  672,  686,

      673,  687,  688,  674,  675,  676,  689,  677,  690,  678,
      692,  679,  680,  681,  682,  683,  684,  691,  693,  685,
      694,  695,  696,  697,  686,  698,  687,  688,  699,  700,
      701,  689,  702,  690,  703,  692,  704,  705,  706,  940,
      710,  711,  691,  693,  712,  694,  695,  696,  697,  713,
      698,  714,  715,  699,  700,  701,  716,  702,  717,  703,
      707,  704,  705,  706,  708,  710,  711,  709,  718,  712,
      719,  720,  721,  722,  713,  723,  714,  715,  724,  725,
      726,  716,  727,  717,  728,  707,  729,  730,  731,  708,
      732,  733,  709,  718,  734,  719,  720,  721,  722,  735,

      723,  736,  737,  724,  725,  726,  738,  727,  739,  728,
      740,  729,  730,  731,  741,  732,  733,  742,  743,  734,
      744,  745,  746,  747,  735,  748,  736,  737,  749,  750,
      751,  738,  752,  739,  755,  740,  756,  753,  757,  741,
      758,  759,  742,  743,  760,  744,  745,  746,  747,  761,
      748,  762,  763,  749,  750,  751,  754,  752,  764,  755,
      765,  756,  753,  757,  766,  758,  759,  767,  768,  760,
      769,  770,  771,  772,  761,  773,  762,  763,  774,  775,
      776,  754,  777,  764,  778,  765,  940,  940,  784,  766,
      785,  786,  767,  768,  787,  769,  770,  771,  772,  788,

      773,  789,  779,  774,  775,  776,  790,  777,  791,  778,
      780,  781,  782,  784,  792,  785,  786,  793,  794,  787,
      783,  795,  796,  797,  788,  798,  789,  779,  799,  800,
      801,  790,  802,  791,  803,  780,  781,  782,  804,  792,
      805,  806,  793,  794,  807,  783,  795,  796,  797,  808,
      798,  809,  810,  799,  800,  801,  811,  802,  812,  803,
      813,  814,  815,  804,  816,  805,  806,  817,  818,  807,
      819,  820,  821,  822,  808,  823,  809,  810,  824,  825,
      826,  811,  827,  812,  828,  813,  814,  815,  829,  816,
      830,  831,  817,  818,  832,  819,  820,  821,  822,  833,

      823,  834,  835,  824,  825,  826,  836,  827,  837,  828,
      839,  840,  841,  829,  842,  830,  831,  843,  838,  832,
      844,  845,  846,  847,  833,  848,  834,  835,  849,  850,
      851,  836,  852,  837,  853,  839,  840,  841,  854,  842,
      855,  856,  843,  838,  857,  844,  845,  846,  847,  858,
      848,  859,  860,  849,  850,  851,  861,  852,  862,  853,
      863,  864,  865,  854,  866,  855,  856,  867,  868,  857,
      869,  870,  871,  872,  858,  873,  859,  860,  874,  875,
      876,  861,  877,  862,  878,  863,  864,  865,  879,  866,
      880,  881,  867,  868,  882,  869,  870,  871,  872,  883,

      873,  884,  885,  874,  875,  876,  886,  877,  887,  878,
      888,  889,  940,  879,  892,  880,  881,  893,  890,  882,
      894,  895,  896,  897,  883,  898,  884,  885,  899,  900,
      901,  886,  902,  887,  903,  888,  889,  891,  904,  892,
      905,  906,  893,  890,  907,  894,  895,  896,  897,  908,
      898,  909,  910,  899,  900,  901,  911,  902,  912,  903,
      913,  914,  891,  904,  915,  905,  906,  916,  917,  907,
      918,  919,  920,  921,  908,  922,  909,  910,  923,  924,
      925,  911,  926,  912,  927,  913,  914,  928,  929,  915,
      930,  931,  916,  917,  932,  918,  919,  920,  921,  933,

      922,  934,  935,  923,  924,  925,  936,  926,  937,  927,
      938,  939,  928,  929,  940,  930,  931,  940,  940,  932,
      940,  940,  940,  940,  933,  940,  934,  935,  940,  940,
      940,  936,  940,  937,  940,  938,  939,    3,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940
    } ;

static yyconst flex_int16_t yy_chk[2008] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   12,
       12,   12,   12,   12,   12,   13,   13,   13,   13,   13,
       13,   14,   14,   14,   14,   14,   14,   15,   15,   15,
       15,   15,   15,   16,   16,   16,   16,   16,   16,  943,

       37,  942,  941,   13,   14,   17,   17,   17,   17,   17,
       17,   23,   22,   41,   15,   35,   22,   24,   23,   22,
       32,   24,   16,   22,   32,   37,   35,   23,   13,   14,
       35,   24,   22,   55,   17,  158,   23,   22,   41,   15,
       35,   22,   24,   23,   22,   32,   24,   16,   22,   32,
       27,   35,   23,   51,   49,   35,   24,   22,   55,   17,
       21,   47,   21,   27,   21,   21,   27,   46,   45,   56,
       57,   44,   21,   30,   21,   27,   21,   21,   28,   21,
       21,   58,   28,   21,   20,   21,   28,   21,   27,   21,
       21,   27,   29,   30,   56,   57,   30,   21,   30,   21,

       29,   21,   21,   28,   21,   21,   58,   28,   21,   25,
       29,   28,   59,   63,   64,   26,   25,   29,   30,   26,
       25,   30,   65,   26,   25,   29,   19,   25,   25,   26,
       25,   18,   26,   11,   25,   29,   66,   59,   63,   64,
       26,   25,   33,    9,   26,   25,   33,   65,   26,   25,
       33,   31,   25,   25,   26,   25,   33,   26,   31,   31,
       34,   66,   33,    8,   34,   31,   38,   33,   34,   42,
       38,   33,   42,   67,   34,   33,   31,    7,   68,    6,
       38,   33,    5,   31,   31,   34,    3,   33,   43,   34,
       31,   38,   43,   34,   42,   38,   69,   42,   67,   34,

       36,   70,   43,   68,   36,   38,   71,   36,   73,   74,
       75,   36,    2,   43,    0,    0,    0,   43,   36,   36,
        0,   69,   76,   78,    0,   36,   70,   43,    0,   36,
       77,   71,   36,   73,   74,   75,   36,   54,   54,   54,
       54,   54,   54,   36,   36,   39,   79,   76,   78,   39,
       77,   80,   39,   39,   81,   77,   80,   39,   82,   39,
       84,   85,    0,   86,   87,   39,    0,   88,    0,   89,
       39,   79,   90,    0,   39,   77,   80,   39,   39,   81,
        0,   80,   39,   82,   39,   84,   85,   83,   86,   87,
       39,   40,   88,   83,   89,   40,   91,   90,   40,   40,

       92,   40,   93,   83,   95,   40,   96,   94,   97,   98,
       99,   40,   83,  102,    0,  100,   40,  104,   83,   94,
       40,   91,  100,   40,   40,   92,   40,   93,   83,   95,
       40,   96,   94,   97,   98,   99,   40,  101,  102,  101,
      100,  105,  104,  106,   94,  106,  108,  100,  107,  107,
      107,  109,  110,    0,  101,  112,  113,    0,    0,  114,
      111,  113,  101,    0,  101,    0,  105,  119,  106,    0,
      106,  108,  114,  107,  107,  107,  109,  110,  111,  101,
      112,  113,  116,  115,  114,  111,  113,  115,  117,  120,
      115,  118,  119,  116,  115,  118,  121,  114,  117,  122,

      115,  123,  124,  111,  126,    0,  129,  116,  115,  128,
      130,  132,  115,  117,  120,  115,  118,    0,  116,  115,
      118,  121,  128,  117,  122,  115,  123,  124,  133,  126,
      127,  129,  131,  135,  128,  130,  132,  127,  127,  131,
      134,  127,  127,  136,  127,    0,  131,  128,  134,  140,
        0,  134,  141,  133,    0,  127,  142,  131,  135,    0,
      134,    0,  127,  127,  131,  134,  127,  127,  136,  127,
      137,  131,  139,  134,  140,  138,  134,  141,  137,  138,
      139,  142,  147,  147,  137,  134,  138,  143,  138,  139,
      143,  138,    0,  139,  144,  137,  148,  139,    0,  144,

      138,  145,  145,  137,  138,  139,  145,  147,  147,  137,
      149,  138,  143,  138,  139,  143,  138,  146,  139,  144,
      150,  148,  151,  146,  144,  153,  145,  145,  154,  146,
      155,  145,  152,  152,  156,  149,  165,  166,  154,  167,
      155,  155,  146,  168,  170,  150,    0,  151,  146,  172,
      153,  173,  174,  154,  146,  155,  175,  152,  152,  156,
      176,  165,  166,  154,  167,  155,  155,  177,  168,  170,
      178,  172,  179,  180,  172,  182,  173,  174,  181,  181,
      183,  175,  184,  185,  186,  176,  188,  189,  190,  191,
      192,  193,  177,  194,  195,  178,  172,  179,  180,  196,

      182,  197,  198,  181,  181,  183,  199,  184,  185,  186,
      200,  188,  189,  190,  191,  192,  193,  201,  194,  195,
      202,  203,  205,  204,  196,  204,  197,  198,  206,  207,
      208,  199,  209,  210,  211,  200,  212,  206,  213,  214,
      215,  216,  201,  218,  219,  202,  203,  205,  204,  220,
      204,  221,  222,  206,  207,  208,  216,  209,  210,  211,
      223,  212,  206,  213,  214,  215,  216,  217,  218,  219,
      224,  217,  225,  226,  220,  227,  221,  222,  228,  229,
      230,  216,  231,  229,  232,  223,  229,  234,  236,  237,
      238,  239,  217,  240,  241,  224,  217,  225,  226,  235,

      227,  242,  235,  228,  229,  230,  235,  231,  229,  232,
      243,  229,  234,  236,  237,  238,  239,  244,  240,  241,
      245,  246,  247,  248,  235,  250,  242,  235,  249,  251,
      249,  235,  252,  250,  251,  243,  253,  254,  255,  256,
      257,  258,  244,  259,  260,  245,  246,  247,  248,  261,
      250,  262,  263,  249,  251,  249,  264,  252,  250,  251,
      265,  253,  254,  255,  256,  257,  258,  268,  259,  260,
      269,  270,  271,  272,  261,  273,  262,  263,  274,  275,
      277,  264,  278,    0,  279,  265,  280,  276,  281,  282,
      283,  284,  268,  276,  285,  269,  270,  271,  272,  276,

      273,  286,  287,  274,  275,  277,  289,  278,  276,  279,
      290,  280,  276,  281,  282,  283,  284,  291,  276,  285,
      292,  294,  295,  296,  276,  297,  286,  287,  298,  299,
      300,  289,  301,  276,  302,  290,  304,  292,  305,  303,
      306,  309,  291,    0,  310,  292,  294,  295,  296,  311,
      297,  303,  307,  298,  299,  300,  312,  301,  313,  302,
      314,  304,  292,  305,  303,  306,  309,  307,  307,  310,
      315,  317,  318,  319,  311,  320,  303,  307,  322,  323,
      324,  312,  325,  313,  326,  314,  329,  330,  331,  332,
      336,  337,  307,  307,  338,  315,  317,  318,  319,  339,

      320,  340,  341,  322,  323,  324,  342,  325,  343,  326,
      344,  329,  330,  331,  332,  336,  337,  345,  346,  338,
      347,  348,  349,  350,  339,  351,  340,  341,  352,  353,
      354,  342,  355,  343,  356,  344,  358,  359,  360,  362,
      363,  365,  345,  346,  366,  347,  348,  349,  350,  367,
      351,  368,  369,  352,  353,  354,  370,  355,  371,  356,
      373,  358,  359,  360,  362,  363,  365,  374,  375,  366,
      376,  378,  379,  380,  367,  382,  368,  369,  383,  384,
      385,  370,  386,  371,  387,  373,  388,  389,  391,  392,
      393,  394,  374,  375,  395,  376,  378,  379,  380,  396,

      382,  397,  398,  383,  384,  385,  399,  386,  400,  387,
      401,  388,  389,  391,  392,  393,  394,  402,  403,  395,
      404,  405,  406,  407,  396,  409,  397,  398,  410,  411,
      412,  399,  413,  400,  414,  401,  415,  416,  417,  418,
      419,  420,  402,  403,  421,  404,  405,  406,  407,  422,
      409,  424,  425,  410,  411,  412,  427,  413,  428,  414,
      429,  415,  416,  417,  418,  419,  420,  426,  426,  421,
      430,  431,  432,  433,  422,  434,  424,  425,  435,  436,
      437,  427,  438,  428,  439,  429,  440,  441,  442,  443,
      444,  445,  426,  426,  446,  430,  431,  432,  433,  447,

      434,  449,  450,  435,  436,  437,  451,  438,  452,  439,
      453,  440,  441,  442,  443,  444,  445,  454,  455,  446,
      456,  458,  459,  460,  447,  461,  449,  450,  462,  461,
      463,  451,  465,  452,  467,  453,  468,  469,  470,  471,
      472,  474,  454,  455,  475,  456,  458,  459,  460,  476,
      461,  477,  478,  462,  461,  463,  479,  465,  480,  467,
      481,  468,  469,  470,  471,  472,  474,  482,  483,  475,
      484,  486,  487,  490,  476,  491,  477,  478,  492,  494,
      495,  479,  498,  480,  499,  481,  501,  503,  504,  505,
      506,  507,  482,  483,  509,  484,  486,  487,  490,  510,

      491,  511,  513,  492,  494,  495,  514,  498,  515,  499,
      516,  501,  503,  504,  505,  506,  507,  517,  518,  509,
      519,  520,  521,  523,  510,  524,  511,  513,  525,  527,
      528,  514,  529,  515,  530,  516,  531,  533,  534,  535,
      536,  537,  517,  518,  540,  519,  520,  521,  523,  541,
      524,  542,  543,  525,  527,  528,  545,  529,  546,  530,
      547,  531,  533,  534,  535,  536,  537,  548,  549,  540,
      552,  553,  555,  556,  541,  558,  542,  543,  559,  560,
      562,  545,  563,  546,  564,  547,  565,  566,  567,  568,
      570,  574,  548,  549,  575,  552,  553,  555,  556,  576,

      558,  577,  579,  559,  560,  562,  582,  563,  583,  564,
      584,  565,  566,  567,  568,  570,  574,  583,  585,  575,
      586,  587,  588,  589,  576,  590,  577,  579,  592,  593,
      594,  582,  595,  583,  596,  584,  597,  598,  599,    0,
      602,  603,  583,  585,  608,  586,  587,  588,  589,  609,
      590,  610,  611,  592,  593,  594,  613,  595,  614,  596,
      600,  597,  598,  599,  600,  602,  603,  600,  615,  608,
      616,  619,  620,  621,  609,  625,  610,  611,  626,  629,
      630,  613,  632,  614,  634,  600,  635,  637,  639,  600,
      640,  641,  600,  615,  643,  616,  619,  620,  621,  644,

      625,  645,  646,  626,  629,  630,  648,  632,  650,  634,
      653,  635,  637,  639,  655,  640,  641,  656,  657,  643,
      658,  659,  660,  661,  644,  663,  645,  646,  664,  666,
      667,  648,  668,  650,  671,  653,  672,  670,  673,  655,
      674,  676,  656,  657,  677,  658,  659,  660,  661,  679,
      663,  680,  682,  664,  666,  667,  670,  668,  683,  671,
      684,  672,  670,  673,  685,  674,  676,  688,  690,  677,
      691,  692,  693,  694,  679,  695,  680,  682,  696,  697,
      698,  670,  699,  683,  700,  684,    0,    0,  702,  685,
      704,  705,  688,  690,  706,  691,  692,  693,  694,  707,

      695,  708,  701,  696,  697,  698,  709,  699,  710,  700,
      701,  701,  701,  702,  712,  704,  705,  713,  714,  706,
      701,  717,  718,  719,  707,  720,  708,  701,  721,  722,
      723,  709,  724,  710,  726,  701,  701,  701,  728,  712,
      729,  731,  713,  714,  732,  701,  717,  718,  719,  733,
      720,  736,  737,  721,  722,  723,  738,  724,  740,  726,
      741,  743,  745,  728,  746,  729,  731,  747,  751,  732,
      752,  753,  754,  757,  733,  758,  736,  737,  759,  760,
      762,  738,  764,  740,  765,  741,  743,  745,  766,  746,
      768,  769,  747,  751,  770,  752,  753,  754,  757,  772,

      758,  774,  775,  759,  760,  762,  778,  764,  779,  765,
      780,  781,  782,  766,  783,  768,  769,  784,  779,  770,
      785,  786,  787,  788,  772,  789,  774,  775,  790,  791,
      792,  778,  793,  779,  794,  780,  781,  782,  796,  783,
      798,  799,  784,  779,  801,  785,  786,  787,  788,  803,
      789,  804,  805,  790,  791,  792,  806,  793,  814,  794,
      815,  816,  818,  796,  820,  798,  799,  821,  824,  801,
      826,  829,  830,  831,  803,  835,  804,  805,  836,  837,
      838,  806,  839,  814,  840,  815,  816,  818,  841,  820,
      842,  843,  821,  824,  844,  826,  829,  830,  831,  846,

      835,  848,  849,  836,  837,  838,  850,  839,  853,  840,
      854,  858,    0,  841,  861,  842,  843,  862,  859,  844,
      863,  864,  866,  867,  846,  871,  848,  849,  872,  874,
      875,  850,  876,  853,  877,  854,  858,  859,  878,  861,
      879,  880,  862,  859,  882,  863,  864,  866,  867,  885,
      871,  887,  888,  872,  874,  875,  889,  876,  890,  877,
      891,  893,  859,  878,  897,  879,  880,  898,  900,  882,
      902,  903,  904,  905,  885,  907,  887,  888,  909,  911,
      912,  889,  913,  890,  915,  891,  893,  917,  919,  897,
      921,  924,  898,  900,  925,  902,  903,  904,  905,  926,

      907,  928,  929,  909,  911,  912,  930,  913,  931,  915,
      933,  938,  917,  919,    0,  921,  924,    0,    0,  925,
        0,    0,    0,    0,  926,    0,  928,  929,    0,    0,
        0,  930,    0,  931,    0,  933,  938,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[200] =
    {   0,
       57,   58,   59,   60,   61,   63,   64,   65,   66,   68,
       70,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   87,   88,   89,   91,   92,   93,
       94,   95,   96,   97,   98,   99,  101,  102,  103,  104,
      105,  106,  107,  108,  110,  111,  112,  113,  114,  115,
      116,  118,  119,  121,  122,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  137,  138,  139,
      140,  141,  142,  143,  145,  147,  148,  149,  150,  151,
      152,  153,  154,  155,  156,  157,  158,  159,  161,  162,
      163,  164,  165,  166,  167,  169,  171,  172,  173,  174,

      175,  176,  177,  178,  179,  180,  181,  182,  183,  185,
      186,  187,  188,  189,  190,  191,  193,  195,  196,  197,
      198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
      208,  210,  211,  212,  213,  214,  215,  216,  218,  220,
      221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
      231,  233,  234,  235,  236,  237,  238,  239,  241,  243,
      244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  256,  257,  258,  259,  260,  261,  262,  264,  266,
      267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
      277,  279,  280,  281,  282,  283,  284,  285,  287

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "holidayscannerplan.lpp"
/*
    Original version from plan by Thomas Driemeyer <thomas@bitrot.de>

    Adapted for use in KOrganizer by
        Preston Brown <pbrown@kde.org> and
        Reinhold Kainhofer <reinhold@kainhofer.com>

    Major rewrite using Bison C++ skeleton:
        Copyright 2010 John Layt <john@layt.net>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to the
    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/
#line 28 "holidayscannerplan.lpp"
# include <cstdlib>
# include <errno.h>
# include <limits.h>
# include <string>
# include "holidayparserdriverplan_p.h"
# include "holidayparserplan.hpp"

# undef yywrap
# define yywrap() 1

#define yyterminate() return token::END
#line 47 "holidayscannerplan.lpp"
# define YY_USER_ACTION  yylloc->columns( yyleng );
#line 1355 "holidayscannerplan.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 50 "holidayscannerplan.lpp"



    yylloc->step();
    typedef KHolidays::HolidayParserPlan::token token;


#line 1606 "holidayscannerplan.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 941 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 940 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 200 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 200 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 201 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 57 "holidayscannerplan.lpp"
{ yylloc->lines( yyleng ); yylloc->step(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 58 "holidayscannerplan.lpp"
{ yylloc->lines( yyleng ); yylloc->step(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 59 "holidayscannerplan.lpp"
{ yylloc->step(); }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 60 "holidayscannerplan.lpp"
{ yylloc->lines( yyleng ); yylloc->step(); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 61 "holidayscannerplan.lpp"
{ return KHolidays::HolidayParserPlan::token_type( *yytext ); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "holidayscannerplan.lpp"
{ return token::COUNTRY; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "holidayscannerplan.lpp"
{ return token::LANGUAGE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "holidayscannerplan.lpp"
{ return token::NAME; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "holidayscannerplan.lpp"
{ return token::DESCRIPTION; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 68 "holidayscannerplan.lpp"
{ yylval->ival = atoi( yytext ); return token::NUMBER; }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 70 "holidayscannerplan.lpp"
{ yylval->sval = strdup( yytext + 1 );
                      yylval->sval[ strlen( yylval->sval ) - 1 ] = 0;
                      return token::STRING; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 74 "holidayscannerplan.lpp"
;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 75 "holidayscannerplan.lpp"
;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 76 "holidayscannerplan.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 77 "holidayscannerplan.lpp"
;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 78 "holidayscannerplan.lpp"
;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 79 "holidayscannerplan.lpp"
{ return token::INOP; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 80 "holidayscannerplan.lpp"
{ return token::IF; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 81 "holidayscannerplan.lpp"
{ return token::PLUS; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 82 "holidayscannerplan.lpp"
{ return token::MINUS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 83 "holidayscannerplan.lpp"
{ return token::SMALL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 84 "holidayscannerplan.lpp"
{ return token::YEAR; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 85 "holidayscannerplan.lpp"
{ return token::LEAPYEAR; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 86 "holidayscannerplan.lpp"
{ return token::EASTER; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 87 "holidayscannerplan.lpp"
{ return token::PASCHA; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 88 "holidayscannerplan.lpp"
{ return token::LENGTH; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 89 "holidayscannerplan.lpp"
{ return token::SHIFT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 91 "holidayscannerplan.lpp"
{ yylval->ival = 1; return token::COLOR; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 92 "holidayscannerplan.lpp"
{ yylval->ival = 2; return token::COLOR; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 93 "holidayscannerplan.lpp"
{ yylval->ival = 3; return token::COLOR; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 94 "holidayscannerplan.lpp"
{ yylval->ival = 4; return token::COLOR; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 95 "holidayscannerplan.lpp"
{ yylval->ival = 5; return token::COLOR; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 96 "holidayscannerplan.lpp"
{ yylval->ival = 6; return token::COLOR; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 97 "holidayscannerplan.lpp"
{ yylval->ival = 7; return token::COLOR; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 98 "holidayscannerplan.lpp"
{ yylval->ival = 8; return token::COLOR; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 99 "holidayscannerplan.lpp"
{ yylval->ival = 9; return token::COLOR; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 101 "holidayscannerplan.lpp"
{ return token::EQ; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 102 "holidayscannerplan.lpp"
{ return token::NE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 103 "holidayscannerplan.lpp"
{ return token::LE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 104 "holidayscannerplan.lpp"
{ return token::GE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 105 "holidayscannerplan.lpp"
{ return token::LT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 106 "holidayscannerplan.lpp"
{ return token::GT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 107 "holidayscannerplan.lpp"
{ return token::AND;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 108 "holidayscannerplan.lpp"
{ return token::OR; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 110 "holidayscannerplan.lpp"
{ yylval->ival =      1; return token::NUMBER; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 111 "holidayscannerplan.lpp"
{ yylval->ival =      2; return token::NUMBER; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 112 "holidayscannerplan.lpp"
{ yylval->ival =      3; return token::NUMBER; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 113 "holidayscannerplan.lpp"
{ yylval->ival =      4; return token::NUMBER; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 114 "holidayscannerplan.lpp"
{ yylval->ival =      5; return token::NUMBER; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 115 "holidayscannerplan.lpp"
{ yylval->ival =  99999; return token::NUMBER; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 116 "holidayscannerplan.lpp"
{ yylval->ival = -99999; return token::NUMBER; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 118 "holidayscannerplan.lpp"
{ yylval->ival =  -1; return token::NUMBER; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 119 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::NUMBER; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 121 "holidayscannerplan.lpp"
{ yylval->sval = "gregorian"; return token::CALENDAR; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 122 "holidayscannerplan.lpp"
{ yylval->sval = "julian"; return token::CALENDAR; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 124 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 125 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 126 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 127 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 128 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 129 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 130 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 131 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 132 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 133 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 134 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 135 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 137 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 138 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 139 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 140 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 141 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 142 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 143 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 145 "holidayscannerplan.lpp"
{ yylval->sval = "coptic"; return token::CALENDAR; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 147 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 148 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 149 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 150 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 151 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 152 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 153 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 154 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 155 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 156 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 157 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 158 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 159 "holidayscannerplan.lpp"
{ yylval->ival =  13; return token::MONTH; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 161 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 162 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 163 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 164 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 165 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 166 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 167 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 169 "holidayscannerplan.lpp"
{ yylval->sval = "ethiopian"; return token::CALENDAR; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 171 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 172 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 173 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 174 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 175 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 176 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 177 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 178 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 179 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 180 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 181 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 182 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 183 "holidayscannerplan.lpp"
{ yylval->ival =  13; return token::MONTH; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 185 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 186 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 187 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 188 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 190 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 193 "holidayscannerplan.lpp"
{ yylval->sval = "hebrew"; return token::CALENDAR; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 195 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 196 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 197 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 198 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 199 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 200 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 201 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 202 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 203 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 204 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 205 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 206 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 207 "holidayscannerplan.lpp"
{ yylval->ival =  13; return token::MONTH; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 208 "holidayscannerplan.lpp"
{ yylval->ival =  14; return token::MONTH; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 210 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 211 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 212 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 213 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 214 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 215 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 216 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 218 "holidayscannerplan.lpp"
{ yylval->sval = "hijri"; return token::CALENDAR; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 220 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 221 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 222 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 223 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 224 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 225 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 226 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 227 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 228 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 229 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 230 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 231 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 233 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 234 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 235 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 236 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 237 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 238 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 239 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 241 "holidayscannerplan.lpp"
{ yylval->sval = "indian-national"; return token::CALENDAR; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 243 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 244 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 245 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 246 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 247 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 248 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 249 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 250 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 251 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 252 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 253 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 254 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 256 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 257 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 258 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 259 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 260 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 261 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 262 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 264 "holidayscannerplan.lpp"
{ yylval->sval = "jalali"; return token::CALENDAR; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 266 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 267 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 268 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 269 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 270 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 271 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 272 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 273 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 274 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 275 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 276 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 277 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 279 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 280 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 281 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 282 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 283 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 284 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 285 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 287 "holidayscannerplan.lpp"
{ driver.error( *yylloc, QString("Holiday Scanner Plan: Invalid Character: %1").arg( yytext ) ); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 289 "holidayscannerplan.lpp"
ECHO;
	YY_BREAK
#line 2723 "holidayscannerplan.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 941 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 941 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 940);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 289 "holidayscannerplan.lpp"



// Skeleton says is easier to implement here to have access to yy variables.

void KHolidays::HolidayParserDriverPlan::scannerInitialise()
{
    yy_flex_debug = m_traceScanning;
    if ( !( yyin = fopen( m_filePath.toLocal8Bit(), "r" ) ) ) {
        error( "cannot open " + m_filePath );
    }
}

void KHolidays::HolidayParserDriverPlan::scannerReset()
{
    //TODO rest counters???
    rewind( yyin );
}

void KHolidays::HolidayParserDriverPlan::scannerTerminate()
{
    fclose( yyin );
}

