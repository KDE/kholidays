#line 2 "holidayscannerplan.cpp"

#line 4 "holidayscannerplan.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 199
#define YY_END_OF_BUFFER 200
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[936] =
    {   0,
        0,    0,  200,  198,    3,    4,    5,  198,  198,    5,
      198,    9,    9,    9,    9,    9,    9,   40,  198,   41,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,    5,    3,    4,   37,    0,   10,
        0,    1,   42,    9,    0,    0,    0,    0,    0,   38,
       36,   39,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  127,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   17,   16,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   14,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   15,    0,    0,
        0,    0,    0,    0,    0,   43,    0,    2,   44,   45,
       46,   47,   48,    0,    0,    0,    0,   50,    0,  113,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   12,    0,  188,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       59,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   28,  111,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  100,    0,    0,    0,    0,
      182,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  186,  122,    0,    0,    0,
        0,    0,    0,  187,    0,    0,    0,    0,   31,    0,
        0,    0,    0,    0,   33,   13,    0,    0,    0,  115,
      128,   85,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  124,    0,    0,    0,   61,    0,    0,
       60,    0,    0,    0,    0,    0,    0,    0,   49,    0,
        0,    0,    0,  169,    0,    0,    0,  185,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   18,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  105,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   79,    0,    0,    0,    0,    0,
        0,    0,    0,   21,    0,    0,    0,    0,    0,  129,
       52,    0,   58,    0,    0,    0,    0,    0,    0,   27,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       11,    0,    0,   48,   44,    0,    0,    0,   29,    0,
        0,  106,  112,    0,    0,   98,    0,  138,    0,    0,

        0,    0,    0,  195,    0,    0,    0,   78,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   57,    0,    0,
        0,   19,    0,    0,    0,    0,    0,  123,    0,    0,
        0,    0,    0,   84,   76,    0,    0,    0,    0,  168,
        0,    0,    0,    0,    0,   92,   91,    0,    0,  145,
        0,    0,  140,    0,    0,    0,  109,    0,    0,    0,
        0,    0,    0,    0,   26,    0,    0,  121,  125,   20,
        0,    0,    0,    0,  126,    0,  120,   46,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   34,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  130,    0,    0,

      165,   62,  189,   51,    0,    0,    0,    0,   74,    0,
        0,    0,   23,  190,    0,    0,    0,   47,   71,  104,
        0,    0,   77,  116,    0,    0,  178,    0,   54,    0,
        0,  166,    0,  119,    0,    0,    0,   25,    0,    0,
        0,    0,   80,    0,   86,    0,   67,  183,    0,  107,
        0,    0,    0,    0,    0,    0,    0,   24,    0,    0,
       88,    0,    0,    0,  114,    0,    0,    0,    0,    0,
       45,    0,    0,  146,    0,    0,  196,    0,    0,    0,
        0,    0,   73,   99,    0,   75,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   30,

        0,    0,    0,    0,    0,    0,    0,  162,    0,    0,
        0,  159,    6,    0,    0,    0,    0,    0,    0,    0,
      118,    0,   55,    0,    0,  181,    0,    0,    0,  102,
       32,    0,    0,    0,  103,    0,    0,   64,    0,  108,
        0,    0,    0,   83,   90,  170,    0,    0,    0,    0,
      147,  177,    0,    0,    0,    0,  136,    0,  148,    0,
        0,    0,    0,   97,    0,    0,    0,  117,    0,   68,
        0,    0,   35,  101,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   66,  191,    0,    0,   56,    0,  174,    0,    0,

        0,    0,    7,   22,  110,  172,   96,  139,   65,    0,
        0,    0,   82,    0,   89,    0,    0,  176,   72,    0,
      192,    0,    0,  163,  171,    0,    0,    0,   70,   94,
      160,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  133,    0,  131,    0,    0,    0,  164,  173,    0,
       95,  179,   53,    0,    0,  161,    0,    0,    0,    0,
       93,    0,    0,   63,  184,    8,  175,    0,    0,   69,
        0,    0,    0,    0,    0,    0,    0,  197,    0,  137,
      135,    0,  167,    0,    0,    0,    0,   87,    0,  194,
       81,  141,    0,    0,  149,    0,  157,    0,    0,    0,

        0,  156,    0,  132,    0,    0,    0,    0,  180,    0,
      150,    0,  153,    0,  155,    0,  134,  193,    0,    0,
        0,  142,    0,    0,    0,    0,  143,    0,  152,  151,
      154,  158,    0,  144,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    1,    7,
        7,    7,    7,    1,    7,    7,    7,    9,   10,   11,
       12,   13,   14,    9,    9,    9,    9,   15,    1,   16,
       17,   18,    7,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,    1,   42,   43,
        7,    1,    7,    1,    1,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,    1,
       67,   68,    1,   69,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[939] =
    {   0,
        0,  298,  287, 1939,  281,  276,  261,  268,  261, 1939,
      226,   61,   67,   73,   79,   85,   97,  215,  210,  168,
      141,   94,   86,   99,  191,  197,  128,  160,  169,  155,
      233,  102,  224,  238,   95,  278,   78,  270,  323,  369,
       95,  244,  279,  103,  166,  166,  159, 1939,  150, 1939,
      151, 1939, 1939,  425,   96,  148,  149,  156,  187, 1939,
     1939, 1939,  195,  196,  185,  201,  202,  238,  255,  254,
      256, 1939,  275,  281,  285,  291,  319,  289,  301,  305,
      311,  301,  326,  311,  314,  313,  318,  336,  336,  335,
      342,  330,  360,  365,  354,  367,  365,  376,  364,  409,

      408,  376, 1939,  384,  388,  411,  418,  423,  408,  413,
      439,  413,  422,  459,  456,  456,  448,  463,  435,  436,
      427,  454,  458, 1939,  475,  500,  503,  485,  470,  509,
      499,  508,  528,  516,  521,  545,  553,  573,  505,  527,
      516,  547,  560,  583,  587,  560,  538,  562,  601,  600,
      606,  603,  603,  617,  602, 1939,  133, 1939, 1939, 1939,
     1939, 1939, 1939,  603,  601,  617,  622, 1939,  623, 1939,
      637,  620,  627,  633,  635,  647,  649,  650,  648,  650,
      641,  648,  650,  646,  662, 1939,  660,  649,  668,  661,
      658,  677,  670,  664,  666,  673,  675,  677,  682,  697,

      700,  701,  684,  697,  702,  693,  711,  706,  697,  708,
      701,  721,  702,  729,  740,  719,  720,  712,  728,  742,
      739,  742,  748,  736,  742,  752,  759,  742,  755,  762,
     1939,  750,  780,  748,  771,  769,  770,  778,  781,  795,
      795,  786,  793,  782,  795,  792,  804,  807,  792,  792,
      800,  806,  800,  820,  808,  809,  814,  831,  829,  840,
      844,  837, 1939, 1939,  849,  842,  831,  838,  841,  851,
      838,  851,  859,  854,  844,  863,  864,  867,  857,  871,
      856,  875,  869,  870,  874, 1939,  891,  882,  886,  901,
     1939,  895,  887,  901,  889,  890,  896,  900,  892,  913,

      916,  897,  899,  910,  938, 1939,  914,  906,  930,  933,
      942,  941,  932, 1939,  951,  935,  937,  947, 1939,  958,
      959,  941,  953,  944, 1939, 1939,  952,  966,  963, 1939,
     1939, 1939,  955,  957,  949,  973,  958,  980,  971,  975,
      995,  985,  987,  987,  981, 1000,  987,  992, 1003,  991,
      988, 1002, 1011, 1939, 1002, 1014, 1016, 1939, 1017, 1014,
     1939, 1003, 1014, 1020, 1018, 1033, 1032, 1024, 1939, 1022,
     1030, 1049, 1038, 1939, 1048, 1054, 1048, 1939, 1048, 1053,
     1041, 1041, 1036, 1061, 1063, 1047, 1048, 1054, 1056, 1070,
     1071, 1061, 1060, 1083, 1086, 1082, 1081, 1092, 1086, 1094,

     1088, 1104, 1099, 1939, 1105, 1095, 1088, 1089, 1098, 1111,
     1112, 1111, 1116, 1100, 1097, 1104, 1109, 1109, 1939, 1124,
     1137, 1144, 1123, 1148, 1128, 1132, 1133, 1133, 1136, 1143,
     1146, 1137, 1159, 1160, 1161, 1139, 1160, 1147, 1164, 1148,
     1160, 1154, 1156, 1170, 1939, 1184, 1183, 1190, 1191, 1195,
     1181, 1190, 1202, 1939, 1197, 1191, 1199, 1203, 1201, 1201,
     1939, 1210, 1939, 1206, 1201, 1197, 1204, 1214, 1221, 1939,
     1201, 1206, 1211, 1235, 1223, 1243, 1232, 1232, 1247, 1236,
     1939, 1235, 1254, 1939, 1939, 1248, 1233, 1238, 1939, 1241,
     1259, 1939, 1939, 1243, 1239, 1939, 1263, 1939, 1251, 1258,

     1250, 1255, 1268, 1939, 1265, 1263, 1278, 1939, 1266, 1277,
     1294, 1291, 1292, 1292, 1282, 1296, 1293, 1939, 1288, 1289,
     1303, 1939, 1285, 1286, 1307, 1294, 1309, 1939, 1313, 1312,
     1313, 1314, 1314, 1939, 1939, 1315, 1303, 1328, 1324, 1939,
     1326, 1324, 1325, 1349, 1346, 1939, 1939, 1347, 1341, 1939,
     1354, 1338, 1939, 1356, 1354, 1355, 1939, 1347, 1347, 1348,
     1363, 1356, 1362, 1367, 1939, 1355, 1371, 1939, 1939, 1939,
     1372, 1352, 1355, 1369, 1939, 1378, 1939, 1939, 1375, 1388,
     1396, 1396, 1401, 1402, 1405, 1388, 1394, 1939, 1400, 1390,
     1399, 1411, 1391, 1414, 1395, 1399, 1436, 1939, 1395, 1421,

     1939, 1939, 1939, 1939, 1408, 1428, 1419, 1445, 1939, 1426,
     1446, 1450, 1939, 1939, 1444, 1451, 1438, 1939, 1939, 1939,
     1448, 1440, 1939, 1939, 1445, 1446, 1939, 1437, 1939, 1461,
     1444, 1939, 1461, 1939, 1466, 1461, 1468, 1939, 1452, 1473,
     1465, 1466, 1939, 1486, 1939, 1494, 1939, 1939, 1495, 1939,
     1493, 1482, 1493, 1488, 1502, 1490, 1486, 1939, 1488, 1487,
     1939, 1495, 1490, 1497, 1939, 1517, 1500, 1514, 1499, 1518,
     1939, 1520, 1522, 1939, 1509, 1516, 1939, 1529, 1544, 1532,
     1530, 1549, 1939, 1939, 1531, 1939, 1543, 1544, 1554, 1532,
     1546, 1534, 1548, 1556, 1557, 1544, 1557, 1586, 1553, 1939,

     1555, 1560, 1566, 1565, 1569, 1582, 1597, 1939, 1599, 1583,
     1594, 1939, 1939, 1585, 1601, 1606, 1599, 1585, 1609, 1610,
     1939, 1613, 1939, 1614, 1609, 1939, 1616, 1614, 1606, 1939,
     1939, 1614, 1636, 1625, 1939, 1628, 1627, 1939, 1641, 1939,
     1633, 1628, 1645, 1939, 1939, 1939, 1636, 1632, 1630, 1647,
     1939, 1939, 1655, 1633, 1653, 1654, 1939, 1659, 1939, 1648,
     1663, 1664, 1649, 1939, 1658, 1665, 1650, 1939, 1674, 1939,
     1679, 1687, 1939, 1939, 1670, 1687, 1676, 1676, 1690, 1699,
     1699, 1693, 1694, 1691, 1698, 1700, 1690, 1696, 1707, 1713,
     1714, 1939, 1939, 1703, 1704, 1939, 1705, 1939, 1704, 1717,

     1736, 1723, 1939, 1939, 1939, 1939, 1939, 1939, 1939, 1722,
     1743, 1741, 1939, 1733, 1939, 1747, 1749, 1939, 1939, 1733,
     1939, 1734, 1748, 1939, 1939, 1754, 1746, 1756, 1939, 1939,
     1939, 1734, 1747, 1759, 1759, 1756, 1752, 1766, 1766, 1764,
     1755, 1939, 1765, 1939, 1778, 1780, 1790, 1939, 1939, 1781,
     1939, 1939, 1939, 1787, 1797, 1939, 1777, 1792, 1796, 1786,
     1939, 1791, 1804, 1939, 1939, 1939, 1939, 1805, 1799, 1939,
     1807, 1805, 1801, 1797, 1801, 1802, 1798, 1939, 1811, 1939,
     1939, 1815, 1939, 1827, 1822, 1815, 1833, 1939, 1825, 1939,
     1939, 1939, 1832, 1839, 1939, 1828, 1939, 1849, 1850, 1851,

     1848, 1939, 1846, 1939, 1851, 1843, 1857, 1858, 1939, 1851,
     1939, 1853, 1939, 1855, 1939, 1860, 1939, 1939, 1866, 1856,
     1868, 1939, 1873, 1865, 1868, 1876, 1939, 1877, 1939, 1939,
     1939, 1939, 1886, 1939, 1939,  102,  101,   99
    } ;

static yyconst flex_int16_t yy_def[939] =
    {   0,
      935,    1,  935,  935,  935,  935,  935,  936,  937,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  938,  935,  935,  935,  936,  935,
      937,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  938,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,    0,  935,  935,  935
    } ;

static yyconst flex_int16_t yy_nxt[2009] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   10,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,    4,   41,
       42,   43,    4,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,    4,   41,   42,   43,    4,   44,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  157,

      132,   51,   49,   55,   56,   54,   54,   54,   54,   54,
       54,   79,   74,  150,   57,  123,   75,   82,   80,   76,
      113,   83,   58,   77,  114,  132,  124,   81,   55,   56,
      125,   84,   78,  159,   59,  158,   79,   74,  150,   57,
      123,   75,   82,   80,   76,  113,   83,   58,   77,  114,
       97,  124,   81,   52,   50,  125,   84,   78,  159,   59,
       63,   47,   64,   98,   65,   66,   99,   46,  158,  160,
      161,  156,   67,  106,   68,   97,   69,   70,  100,   71,
       72,  162,  101,   73,   62,   63,  102,   64,   98,   65,
       66,   99,  103,  107,  160,  161,  108,   67,  106,   68,

      104,   69,   70,  100,   71,   72,  162,  101,   73,   85,
      105,  102,  163,  164,  165,   92,   86,  103,  107,   93,
       87,  108,  166,   94,   88,  104,   61,   89,   90,   95,
       91,   60,   96,   53,   85,  105,  167,  163,  164,  165,
       92,   86,  115,  168,   93,   87,  116,  166,   94,   88,
      117,  109,   89,   90,   95,   91,  118,   96,  110,  111,
      120,  167,  119,   52,  121,  112,  151,  115,  168,  152,
      122,  116,   50,  169,  170,  117,  109,   48,   47,  171,
      172,  118,   46,  110,  111,  120,  935,  119,  133,  121,
      112,  151,  134,  173,  152,  122,  126,  153,  169,  170,

      127,  154,  135,  128,  171,  172,  174,  129,  175,  176,
      179,  155,   45,  133,  130,  131,  935,  134,  173,  180,
      935,  126,  153,  935,  935,  127,  154,  135,  128,  183,
      935,  174,  129,  175,  176,  179,  155,  177,  181,  130,
      131,  136,  184,  182,  180,  137,  185,  187,  138,  139,
      188,  189,  186,  140,  183,  141,  190,  178,  191,  192,
      193,  142,  177,  181,  194,  195,  136,  184,  182,  935,
      137,  185,  187,  138,  139,  188,  189,  186,  140,  196,
      141,  190,  178,  191,  192,  193,  142,  143,  197,  194,
      195,  144,  199,  200,  145,  146,  201,  147,  202,  203,

      198,  148,  935,  209,  196,  210,  211,  149,  935,  935,
      935,  935,  143,  197,  935,  935,  144,  199,  200,  145,
      146,  201,  147,  202,  203,  198,  148,  206,  209,  207,
      210,  211,  149,   54,   54,   54,   54,   54,   54,  204,
      212,  217,  213,  218,  208,  219,  205,  214,  215,  216,
      935,  222,  206,  223,  207,  935,  935,  220,  224,  935,
      238,  239,  935,  240,  204,  212,  217,  213,  218,  208,
      219,  205,  214,  215,  216,  221,  222,  225,  223,  234,
      227,  232,  220,  224,  228,  238,  239,  229,  240,  235,
      226,  230,  233,  241,  236,  242,  243,  231,  237,  935,

      221,  935,  225,  252,  234,  227,  232,  935,  253,  228,
      935,  935,  229,  935,  235,  226,  230,  233,  241,  236,
      242,  243,  231,  237,  244,  257,  250,  254,  252,  258,
      935,  245,  246,  253,  255,  247,  248,  263,  249,  251,
      264,  256,  935,  935,  278,  279,  280,  259,  935,  244,
      257,  250,  254,  935,  258,  260,  245,  246,  261,  255,
      247,  248,  263,  249,  251,  264,  256,  262,  265,  278,
      279,  280,  259,  268,  935,  281,  266,  269,  282,  293,
      260,  294,  267,  261,  270,  283,  271,  935,  935,  272,
      284,  273,  262,  265,  935,  291,  292,  935,  268,  274,

      281,  266,  269,  282,  293,  275,  294,  267,  276,  270,
      283,  271,  277,  288,  272,  284,  273,  285,  286,  289,
      291,  292,  287,  295,  274,  290,  296,  297,  298,  299,
      275,  300,  305,  276,  306,  302,  307,  277,  288,  308,
      309,  301,  285,  286,  289,  303,  304,  287,  295,  310,
      290,  296,  297,  298,  299,  311,  300,  305,  313,  306,
      302,  307,  314,  315,  308,  309,  301,  316,  317,  318,
      303,  304,  319,  320,  310,  321,  322,  312,  323,  324,
      311,  325,  326,  313,  327,  328,  329,  314,  315,  330,
      331,  332,  316,  317,  318,  333,  334,  319,  320,  335,

      321,  322,  312,  323,  324,  336,  325,  326,  337,  327,
      328,  329,  338,  339,  330,  331,  332,  340,  341,  342,
      333,  334,  345,  343,  335,  344,  346,  348,  349,  350,
      336,  351,  352,  337,  353,  347,  354,  338,  339,  355,
      356,  361,  340,  341,  342,  935,  362,  345,  343,  363,
      344,  346,  348,  349,  350,  357,  351,  352,  359,  353,
      347,  354,  360,  364,  355,  356,  361,  365,  366,  367,
      358,  362,  368,  369,  363,  370,  371,  372,  375,  376,
      357,  373,  377,  359,  374,  378,  382,  360,  364,  383,
      384,  385,  365,  366,  367,  358,  386,  368,  369,  387,

      370,  371,  372,  375,  376,  379,  373,  377,  380,  374,
      378,  382,  381,  388,  383,  384,  385,  389,  390,  391,
      392,  386,  393,  394,  387,  395,  396,  398,  400,  401,
      379,  402,  399,  380,  397,  403,  404,  381,  388,  405,
      406,  407,  389,  390,  391,  392,  408,  393,  394,  409,
      395,  396,  398,  400,  401,  410,  402,  399,  411,  397,
      403,  404,  412,  413,  405,  406,  407,  414,  415,  416,
      417,  408,  418,  419,  409,  420,  421,  426,  422,  427,
      410,  428,  429,  411,  423,  430,  431,  412,  413,  432,
      424,  433,  414,  415,  416,  417,  434,  418,  419,  425,

      420,  421,  426,  422,  427,  435,  428,  429,  436,  423,
      430,  431,  437,  438,  432,  424,  433,  439,  440,  441,
      443,  434,  444,  445,  425,  446,  447,  448,  449,  450,
      435,  451,  454,  436,  452,  455,  442,  437,  438,  456,
      460,  461,  439,  440,  441,  443,  453,  444,  445,  935,
      446,  447,  448,  449,  450,  462,  451,  454,  457,  452,
      455,  442,  463,  464,  456,  460,  461,  465,  466,  467,
      468,  453,  469,  458,  459,  470,  471,  472,  473,  474,
      462,  475,  476,  457,  477,  478,  479,  463,  464,  480,
      481,  482,  465,  466,  467,  468,  483,  469,  458,  459,

      470,  471,  472,  473,  474,  484,  475,  476,  485,  477,
      478,  479,  486,  487,  480,  481,  482,  488,  489,  490,
      491,  483,  492,  493,  494,  495,  496,  497,  498,  499,
      484,  500,  501,  485,  502,  503,  504,  486,  487,  505,
      506,  507,  488,  489,  490,  491,  508,  492,  493,  494,
      495,  496,  497,  498,  499,  509,  500,  501,  510,  502,
      503,  504,  511,  512,  505,  506,  507,  513,  514,  515,
      516,  508,  517,  518,  519,  520,  521,  522,  523,  524,
      509,  525,  526,  510,  527,  528,  529,  511,  512,  530,
      531,  532,  513,  514,  515,  516,  533,  517,  518,  519,

      520,  521,  522,  523,  524,  534,  525,  526,  535,  527,
      528,  529,  536,  537,  530,  531,  532,  538,  539,  540,
      541,  533,  542,  543,  544,  545,  546,  547,  548,  549,
      534,  550,  551,  535,  552,  553,  554,  536,  537,  555,
      556,  557,  538,  539,  540,  541,  558,  542,  543,  544,
      545,  546,  547,  548,  549,  559,  550,  551,  562,  552,
      553,  554,  560,  561,  555,  556,  557,  563,  564,  565,
      566,  558,  567,  568,  569,  570,  571,  572,  573,  574,
      559,  575,  576,  562,  577,  578,  579,  560,  561,  580,
      581,  582,  563,  564,  565,  566,  583,  567,  568,  569,

      570,  571,  572,  573,  574,  584,  575,  576,  585,  577,
      578,  579,  586,  587,  580,  581,  582,  588,  589,  590,
      591,  583,  592,  593,  594,  595,  597,  598,  599,  596,
      584,  600,  601,  585,  602,  603,  604,  586,  587,  605,
      606,  607,  588,  589,  590,  591,  608,  592,  593,  594,
      595,  597,  598,  599,  596,  609,  600,  601,  610,  602,
      603,  604,  611,  612,  605,  606,  607,  613,  614,  615,
      616,  608,  617,  618,  619,  620,  621,  622,  623,  624,
      609,  625,  626,  610,  627,  628,  629,  611,  612,  630,
      631,  632,  613,  614,  615,  616,  633,  617,  618,  619,

      620,  621,  622,  623,  624,  634,  625,  626,  635,  627,
      628,  629,  636,  637,  630,  631,  632,  638,  639,  640,
      641,  633,  642,  643,  644,  645,  646,  647,  648,  649,
      634,  650,  651,  635,  652,  653,  654,  636,  637,  655,
      656,  657,  638,  639,  640,  641,  658,  642,  643,  644,
      645,  646,  647,  648,  649,  659,  650,  651,  660,  652,
      653,  654,  661,  662,  655,  656,  657,  663,  664,  665,
      666,  658,  667,  668,  669,  670,  671,  672,  673,  674,
      659,  675,  676,  660,  677,  678,  679,  661,  662,  680,
      681,  682,  663,  664,  665,  666,  683,  667,  668,  669,

      670,  671,  672,  673,  674,  684,  675,  676,  685,  677,
      678,  679,  686,  687,  680,  681,  682,  689,  690,  691,
      692,  683,  688,  693,  694,  695,  696,  697,  698,  699,
      684,  700,  701,  685,  702,  703,  707,  686,  687,  708,
      935,  709,  689,  690,  691,  692,  710,  688,  693,  694,
      695,  696,  697,  698,  699,  711,  700,  701,  704,  702,
      703,  707,  705,  712,  708,  706,  709,  713,  714,  715,
      716,  710,  717,  718,  719,  720,  721,  722,  723,  724,
      711,  725,  726,  704,  727,  728,  729,  705,  712,  730,
      706,  731,  713,  714,  715,  716,  732,  717,  718,  719,

      720,  721,  722,  723,  724,  733,  725,  726,  734,  727,
      728,  729,  735,  736,  730,  737,  731,  738,  739,  740,
      741,  732,  742,  743,  744,  745,  746,  747,  748,  935,
      733,  751,  752,  734,  753,  749,  754,  735,  736,  755,
      737,  756,  738,  739,  740,  741,  757,  742,  743,  744,
      745,  746,  747,  748,  750,  758,  751,  752,  759,  753,
      749,  754,  760,  761,  755,  762,  756,  763,  764,  765,
      766,  757,  767,  768,  769,  770,  771,  772,  773,  750,
      758,  774,  775,  759,  781,  782,  783,  760,  761,  935,
      762,  784,  763,  764,  765,  766,  785,  767,  768,  769,

      770,  771,  772,  773,  776,  786,  774,  775,  787,  781,
      782,  783,  777,  778,  779,  788,  784,  789,  790,  791,
      792,  785,  780,  793,  794,  795,  796,  797,  798,  776,
      786,  799,  800,  787,  801,  802,  803,  777,  778,  779,
      788,  804,  789,  790,  791,  792,  805,  780,  793,  794,
      795,  796,  797,  798,  806,  807,  799,  800,  808,  801,
      802,  803,  809,  810,  811,  812,  804,  813,  814,  815,
      816,  805,  817,  818,  819,  820,  821,  822,  823,  806,
      807,  824,  825,  808,  826,  827,  828,  809,  810,  811,
      812,  829,  813,  814,  815,  816,  830,  817,  818,  819,

      820,  821,  822,  823,  831,  832,  824,  825,  833,  826,
      827,  828,  834,  836,  837,  838,  829,  839,  840,  841,
      842,  830,  835,  843,  844,  845,  846,  847,  848,  831,
      832,  849,  850,  833,  851,  852,  853,  834,  836,  837,
      838,  854,  839,  840,  841,  842,  855,  835,  843,  844,
      845,  846,  847,  848,  856,  857,  849,  850,  858,  851,
      852,  853,  859,  860,  861,  862,  854,  863,  864,  865,
      866,  855,  867,  868,  869,  870,  871,  872,  873,  856,
      857,  874,  875,  858,  876,  877,  878,  859,  860,  861,
      862,  879,  863,  864,  865,  866,  880,  867,  868,  869,

      870,  871,  872,  873,  881,  882,  874,  875,  883,  876,
      877,  878,  884,  885,  888,  886,  879,  889,  890,  891,
      892,  880,  893,  894,  895,  896,  897,  898,  899,  881,
      882,  900,  901,  883,  887,  902,  903,  884,  885,  888,
      886,  904,  889,  890,  891,  892,  905,  893,  894,  895,
      896,  897,  898,  899,  906,  907,  900,  901,  908,  887,
      902,  903,  909,  910,  911,  912,  904,  913,  914,  915,
      916,  905,  917,  918,  919,  920,  921,  922,  923,  906,
      907,  924,  925,  908,  926,  927,  928,  909,  910,  911,
      912,  929,  913,  914,  915,  916,  930,  917,  918,  919,

      920,  921,  922,  923,  931,  932,  924,  925,  933,  926,
      927,  928,  934,  935,  935,  935,  929,  935,  935,  935,
      935,  930,  935,  935,  935,  935,  935,  935,  935,  931,
      932,  935,  935,  933,  935,  935,  935,  934,    3,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  935,  935,  935
    } ;

static yyconst flex_int16_t yy_chk[2009] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   12,
       12,   12,   12,   12,   12,   13,   13,   13,   13,   13,
       13,   14,   14,   14,   14,   14,   14,   15,   15,   15,
       15,   15,   15,   16,   16,   16,   16,   16,   16,  938,

       37,  937,  936,   13,   14,   17,   17,   17,   17,   17,
       17,   23,   22,   41,   15,   35,   22,   24,   23,   22,
       32,   24,   16,   22,   32,   37,   35,   23,   13,   14,
       35,   24,   22,   55,   17,  157,   23,   22,   41,   15,
       35,   22,   24,   23,   22,   32,   24,   16,   22,   32,
       27,   35,   23,   51,   49,   35,   24,   22,   55,   17,
       21,   47,   21,   27,   21,   21,   27,   46,   45,   56,
       57,   44,   21,   30,   21,   27,   21,   21,   28,   21,
       21,   58,   28,   21,   20,   21,   28,   21,   27,   21,
       21,   27,   29,   30,   56,   57,   30,   21,   30,   21,

       29,   21,   21,   28,   21,   21,   58,   28,   21,   25,
       29,   28,   59,   63,   64,   26,   25,   29,   30,   26,
       25,   30,   65,   26,   25,   29,   19,   25,   25,   26,
       25,   18,   26,   11,   25,   29,   66,   59,   63,   64,
       26,   25,   33,   67,   26,   25,   33,   65,   26,   25,
       33,   31,   25,   25,   26,   25,   33,   26,   31,   31,
       34,   66,   33,    9,   34,   31,   42,   33,   67,   42,
       34,   33,    8,   68,   69,   33,   31,    7,    6,   70,
       71,   33,    5,   31,   31,   34,    3,   33,   38,   34,
       31,   42,   38,   73,   42,   34,   36,   43,   68,   69,

       36,   43,   38,   36,   70,   71,   74,   36,   75,   76,
       78,   43,    2,   38,   36,   36,    0,   38,   73,   79,
        0,   36,   43,    0,    0,   36,   43,   38,   36,   81,
        0,   74,   36,   75,   76,   78,   43,   77,   80,   36,
       36,   39,   82,   80,   79,   39,   83,   84,   39,   39,
       85,   86,   83,   39,   81,   39,   87,   77,   88,   89,
       90,   39,   77,   80,   91,   92,   39,   82,   80,    0,
       39,   83,   84,   39,   39,   85,   86,   83,   39,   93,
       39,   87,   77,   88,   89,   90,   39,   40,   94,   91,
       92,   40,   95,   96,   40,   40,   97,   40,   98,   99,

       94,   40,    0,  102,   93,  104,  105,   40,    0,    0,
        0,    0,   40,   94,    0,    0,   40,   95,   96,   40,
       40,   97,   40,   98,   99,   94,   40,  101,  102,  101,
      104,  105,   40,   54,   54,   54,   54,   54,   54,  100,
      106,  108,  106,  109,  101,  110,  100,  107,  107,  107,
        0,  112,  101,  113,  101,    0,    0,  111,  113,    0,
      119,  120,    0,  121,  100,  106,  108,  106,  109,  101,
      110,  100,  107,  107,  107,  111,  112,  114,  113,  117,
      115,  116,  111,  113,  115,  119,  120,  115,  121,  117,
      114,  115,  116,  122,  118,  123,  125,  115,  118,    0,

      111,    0,  114,  128,  117,  115,  116,    0,  129,  115,
        0,    0,  115,    0,  117,  114,  115,  116,  122,  118,
      123,  125,  115,  118,  126,  131,  127,  130,  128,  132,
        0,  126,  126,  129,  130,  126,  126,  134,  126,  127,
      135,  130,    0,    0,  139,  140,  141,  133,    0,  126,
      131,  127,  130,    0,  132,  133,  126,  126,  133,  130,
      126,  126,  134,  126,  127,  135,  130,  133,  136,  139,
      140,  141,  133,  137,    0,  142,  136,  137,  142,  147,
      133,  148,  136,  133,  137,  143,  137,    0,    0,  137,
      143,  138,  133,  136,    0,  146,  146,    0,  137,  138,

      142,  136,  137,  142,  147,  138,  148,  136,  138,  137,
      143,  137,  138,  145,  137,  143,  138,  144,  144,  145,
      146,  146,  144,  149,  138,  145,  150,  151,  151,  152,
      138,  153,  155,  138,  164,  154,  165,  138,  145,  166,
      167,  153,  144,  144,  145,  154,  154,  144,  149,  169,
      145,  150,  151,  151,  152,  171,  153,  155,  172,  164,
      154,  165,  173,  174,  166,  167,  153,  175,  176,  177,
      154,  154,  178,  179,  169,  180,  180,  171,  181,  182,
      171,  183,  184,  172,  185,  187,  188,  173,  174,  189,
      190,  191,  175,  176,  177,  192,  193,  178,  179,  194,

      180,  180,  171,  181,  182,  195,  183,  184,  196,  185,
      187,  188,  197,  198,  189,  190,  191,  199,  200,  201,
      192,  193,  203,  202,  194,  202,  204,  205,  206,  207,
      195,  208,  209,  196,  210,  204,  211,  197,  198,  212,
      213,  216,  199,  200,  201,    0,  217,  203,  202,  218,
      202,  204,  205,  206,  207,  214,  208,  209,  215,  210,
      204,  211,  215,  219,  212,  213,  216,  220,  221,  222,
      214,  217,  223,  224,  218,  225,  226,  227,  228,  229,
      214,  227,  230,  215,  227,  232,  234,  215,  219,  235,
      236,  237,  220,  221,  222,  214,  238,  223,  224,  239,

      225,  226,  227,  228,  229,  233,  227,  230,  233,  227,
      232,  234,  233,  240,  235,  236,  237,  241,  242,  243,
      244,  238,  245,  246,  239,  246,  247,  248,  249,  250,
      233,  251,  248,  233,  247,  252,  253,  233,  240,  254,
      255,  256,  241,  242,  243,  244,  257,  245,  246,  258,
      246,  247,  248,  249,  250,  259,  251,  248,  260,  247,
      252,  253,  261,  262,  254,  255,  256,  265,  266,  267,
      268,  257,  269,  270,  258,  271,  272,  274,  273,  275,
      259,  276,  277,  260,  273,  278,  279,  261,  262,  280,
      273,  281,  265,  266,  267,  268,  282,  269,  270,  273,

      271,  272,  274,  273,  275,  283,  276,  277,  284,  273,
      278,  279,  285,  287,  280,  273,  281,  288,  289,  290,
      292,  282,  293,  294,  273,  295,  296,  297,  298,  299,
      283,  300,  302,  284,  301,  303,  290,  285,  287,  304,
      307,  308,  288,  289,  290,  292,  301,  293,  294,    0,
      295,  296,  297,  298,  299,  309,  300,  302,  305,  301,
      303,  290,  310,  311,  304,  307,  308,  312,  313,  315,
      316,  301,  317,  305,  305,  318,  320,  321,  322,  323,
      309,  324,  327,  305,  328,  329,  333,  310,  311,  334,
      335,  336,  312,  313,  315,  316,  337,  317,  305,  305,

      318,  320,  321,  322,  323,  338,  324,  327,  339,  328,
      329,  333,  340,  341,  334,  335,  336,  342,  343,  344,
      345,  337,  346,  347,  348,  349,  350,  351,  352,  353,
      338,  355,  356,  339,  357,  359,  360,  340,  341,  362,
      363,  364,  342,  343,  344,  345,  365,  346,  347,  348,
      349,  350,  351,  352,  353,  366,  355,  356,  367,  357,
      359,  360,  368,  370,  362,  363,  364,  371,  372,  373,
      375,  365,  376,  377,  379,  380,  381,  382,  383,  384,
      366,  385,  386,  367,  387,  388,  389,  368,  370,  390,
      391,  392,  371,  372,  373,  375,  393,  376,  377,  379,

      380,  381,  382,  383,  384,  394,  385,  386,  395,  387,
      388,  389,  396,  397,  390,  391,  392,  398,  399,  400,
      401,  393,  402,  403,  405,  406,  407,  408,  409,  410,
      394,  411,  412,  395,  413,  414,  415,  396,  397,  416,
      417,  418,  398,  399,  400,  401,  420,  402,  403,  405,
      406,  407,  408,  409,  410,  421,  411,  412,  423,  413,
      414,  415,  422,  422,  416,  417,  418,  424,  425,  426,
      427,  420,  428,  429,  430,  431,  432,  433,  434,  435,
      421,  436,  437,  423,  438,  439,  440,  422,  422,  441,
      442,  443,  424,  425,  426,  427,  444,  428,  429,  430,

      431,  432,  433,  434,  435,  446,  436,  437,  447,  438,
      439,  440,  448,  449,  441,  442,  443,  450,  451,  452,
      453,  444,  455,  456,  457,  458,  459,  460,  462,  458,
      446,  464,  465,  447,  466,  467,  468,  448,  449,  469,
      471,  472,  450,  451,  452,  453,  473,  455,  456,  457,
      458,  459,  460,  462,  458,  474,  464,  465,  475,  466,
      467,  468,  476,  477,  469,  471,  472,  478,  479,  480,
      482,  473,  483,  486,  487,  488,  490,  491,  494,  495,
      474,  497,  499,  475,  500,  501,  502,  476,  477,  503,
      505,  506,  478,  479,  480,  482,  507,  483,  486,  487,

      488,  490,  491,  494,  495,  509,  497,  499,  510,  500,
      501,  502,  511,  512,  503,  505,  506,  513,  514,  515,
      516,  507,  517,  519,  520,  521,  523,  524,  525,  526,
      509,  527,  529,  510,  530,  531,  532,  511,  512,  533,
      536,  537,  513,  514,  515,  516,  538,  517,  519,  520,
      521,  523,  524,  525,  526,  539,  527,  529,  541,  530,
      531,  532,  542,  543,  533,  536,  537,  544,  545,  548,
      549,  538,  551,  552,  554,  555,  556,  558,  559,  560,
      539,  561,  562,  541,  563,  564,  566,  542,  543,  567,
      571,  572,  544,  545,  548,  549,  573,  551,  552,  554,

      555,  556,  558,  559,  560,  574,  561,  562,  576,  563,
      564,  566,  579,  580,  567,  571,  572,  581,  582,  583,
      584,  573,  580,  585,  586,  587,  589,  590,  591,  592,
      574,  593,  594,  576,  595,  596,  599,  579,  580,  600,
        0,  605,  581,  582,  583,  584,  606,  580,  585,  586,
      587,  589,  590,  591,  592,  607,  593,  594,  597,  595,
      596,  599,  597,  608,  600,  597,  605,  610,  611,  612,
      615,  606,  616,  617,  621,  622,  625,  626,  628,  630,
      607,  631,  633,  597,  635,  636,  637,  597,  608,  639,
      597,  640,  610,  611,  612,  615,  641,  616,  617,  621,

      622,  625,  626,  628,  630,  642,  631,  633,  644,  635,
      636,  637,  646,  649,  639,  651,  640,  652,  653,  654,
      655,  641,  656,  657,  659,  660,  662,  663,  664,    0,
      642,  667,  668,  644,  669,  666,  670,  646,  649,  672,
      651,  673,  652,  653,  654,  655,  675,  656,  657,  659,
      660,  662,  663,  664,  666,  676,  667,  668,  678,  669,
      666,  670,  679,  680,  672,  681,  673,  682,  685,  687,
      688,  675,  689,  690,  691,  692,  693,  694,  695,  666,
      676,  696,  697,  678,  699,  701,  702,  679,  680,    0,
      681,  703,  682,  685,  687,  688,  704,  689,  690,  691,

      692,  693,  694,  695,  698,  705,  696,  697,  706,  699,
      701,  702,  698,  698,  698,  707,  703,  709,  710,  711,
      714,  704,  698,  715,  716,  717,  718,  719,  720,  698,
      705,  722,  724,  706,  725,  727,  728,  698,  698,  698,
      707,  729,  709,  710,  711,  714,  732,  698,  715,  716,
      717,  718,  719,  720,  733,  734,  722,  724,  736,  725,
      727,  728,  737,  739,  741,  742,  729,  743,  747,  748,
      749,  732,  750,  753,  754,  755,  756,  758,  760,  733,
      734,  761,  762,  736,  763,  765,  766,  737,  739,  741,
      742,  767,  743,  747,  748,  749,  769,  750,  753,  754,

      755,  756,  758,  760,  771,  772,  761,  762,  775,  763,
      765,  766,  776,  777,  778,  779,  767,  780,  781,  782,
      783,  769,  776,  784,  785,  786,  787,  788,  789,  771,
      772,  790,  791,  775,  794,  795,  797,  776,  777,  778,
      779,  799,  780,  781,  782,  783,  800,  776,  784,  785,
      786,  787,  788,  789,  801,  802,  790,  791,  810,  794,
      795,  797,  811,  812,  814,  816,  799,  817,  820,  822,
      823,  800,  826,  827,  828,  832,  833,  834,  835,  801,
      802,  836,  837,  810,  838,  839,  840,  811,  812,  814,
      816,  841,  817,  820,  822,  823,  843,  826,  827,  828,

      832,  833,  834,  835,  845,  846,  836,  837,  847,  838,
      839,  840,  850,  854,  857,  855,  841,  858,  859,  860,
      862,  843,  863,  868,  869,  871,  872,  873,  874,  845,
      846,  875,  876,  847,  855,  877,  879,  850,  854,  857,
      855,  882,  858,  859,  860,  862,  884,  863,  868,  869,
      871,  872,  873,  874,  885,  886,  875,  876,  887,  855,
      877,  879,  889,  893,  894,  896,  882,  898,  899,  900,
      901,  884,  903,  905,  906,  907,  908,  910,  912,  885,
      886,  914,  916,  887,  919,  920,  921,  889,  893,  894,
      896,  923,  898,  899,  900,  901,  924,  903,  905,  906,

      907,  908,  910,  912,  925,  926,  914,  916,  928,  919,
      920,  921,  933,    0,    0,    0,  923,    0,    0,    0,
        0,  924,    0,    0,    0,    0,    0,    0,    0,  925,
      926,    0,    0,  928,    0,    0,    0,  933,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  935,  935,  935
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[199] =
    {   0,
       57,   58,   59,   60,   61,   63,   64,   65,   66,   68,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   83,   84,   85,   86,   87,   89,   90,   91,   92,
       93,   94,   95,   96,   97,   99,  100,  101,  102,  103,
      104,  105,  106,  108,  109,  110,  111,  112,  113,  114,
      116,  117,  119,  120,  122,  123,  124,  125,  126,  127,
      128,  129,  130,  131,  132,  133,  135,  136,  137,  138,
      139,  140,  141,  143,  145,  146,  147,  148,  149,  150,
      151,  152,  153,  154,  155,  156,  157,  159,  160,  161,
      162,  163,  164,  165,  167,  169,  170,  171,  172,  173,

      174,  175,  176,  177,  178,  179,  180,  181,  183,  184,
      185,  186,  187,  188,  189,  191,  193,  194,  195,  196,
      197,  198,  199,  200,  201,  202,  203,  204,  205,  206,
      208,  209,  210,  211,  212,  213,  214,  216,  218,  219,
      220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
      231,  232,  233,  234,  235,  236,  237,  239,  241,  242,
      243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
      254,  255,  256,  257,  258,  259,  260,  262,  264,  265,
      266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
      277,  278,  279,  280,  281,  282,  283,  285

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "holidayscannerplan.lpp"
/*
    Original version from plan by Thomas Driemeyer <thomas@bitrot.de>

    Adapted for use in KOrganizer by
        Preston Brown <pbrown@kde.org> and
        Reinhold Kainhofer <reinhold@kainhofer.com>

    Major rewrite using Bison C++ skeleton:
        Copyright 2010 John Layt <john@layt.net>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to the
    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/
#line 28 "holidayscannerplan.lpp"
# include <cstdlib>
# include <errno.h>
# include <limits.h>
# include <string>
# include "holidayparserdriverplan_p.h"
# include "holidayparserplan.hpp"

# undef yywrap
# define yywrap() 1

#define yyterminate() return token::END
#line 47 "holidayscannerplan.lpp"
# define YY_USER_ACTION  yylloc->columns( yyleng );
#line 1353 "holidayscannerplan.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 50 "holidayscannerplan.lpp"



    yylloc->step();
    typedef KHolidays::HolidayParserPlan::token token;


#line 1604 "holidayscannerplan.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 936 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 935 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 199 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 199 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 200 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 57 "holidayscannerplan.lpp"
{ yylloc->lines( yyleng ); yylloc->step(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 58 "holidayscannerplan.lpp"
{ yylloc->lines( yyleng ); yylloc->step(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 59 "holidayscannerplan.lpp"
{ yylloc->step(); }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 60 "holidayscannerplan.lpp"
{ yylloc->lines( yyleng ); yylloc->step(); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 61 "holidayscannerplan.lpp"
{ return KHolidays::HolidayParserPlan::token_type( *yytext ); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "holidayscannerplan.lpp"
{ return token::COUNTRY; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "holidayscannerplan.lpp"
{ return token::LANGUAGE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "holidayscannerplan.lpp"
{ return token::SHORTNAME; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "holidayscannerplan.lpp"
{ yylval->ival = atoi( yytext ); return token::NUMBER; }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 68 "holidayscannerplan.lpp"
{ yylval->sval = strdup( yytext + 1 );
                      yylval->sval[ strlen( yylval->sval ) - 1 ] = 0;
                      return token::STRING; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "holidayscannerplan.lpp"
;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "holidayscannerplan.lpp"
;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "holidayscannerplan.lpp"
;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "holidayscannerplan.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "holidayscannerplan.lpp"
;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "holidayscannerplan.lpp"
{ return token::IN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 78 "holidayscannerplan.lpp"
{ return token::IF; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 79 "holidayscannerplan.lpp"
{ return token::PLUS; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 80 "holidayscannerplan.lpp"
{ return token::MINUS; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "holidayscannerplan.lpp"
{ return token::SMALL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 82 "holidayscannerplan.lpp"
{ return token::YEAR; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 83 "holidayscannerplan.lpp"
{ return token::LEAPYEAR; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "holidayscannerplan.lpp"
{ return token::EASTER; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "holidayscannerplan.lpp"
{ return token::PASCHA; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "holidayscannerplan.lpp"
{ return token::LENGTH; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "holidayscannerplan.lpp"
{ return token::SHIFT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 89 "holidayscannerplan.lpp"
{ yylval->ival = 1; return token::COLOR; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 90 "holidayscannerplan.lpp"
{ yylval->ival = 2; return token::COLOR; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 91 "holidayscannerplan.lpp"
{ yylval->ival = 3; return token::COLOR; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 92 "holidayscannerplan.lpp"
{ yylval->ival = 4; return token::COLOR; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 93 "holidayscannerplan.lpp"
{ yylval->ival = 5; return token::COLOR; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 94 "holidayscannerplan.lpp"
{ yylval->ival = 6; return token::COLOR; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 95 "holidayscannerplan.lpp"
{ yylval->ival = 7; return token::COLOR; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 96 "holidayscannerplan.lpp"
{ yylval->ival = 8; return token::COLOR; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 97 "holidayscannerplan.lpp"
{ yylval->ival = 9; return token::COLOR; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 99 "holidayscannerplan.lpp"
{ return token::EQ; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 100 "holidayscannerplan.lpp"
{ return token::NE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 101 "holidayscannerplan.lpp"
{ return token::LE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 102 "holidayscannerplan.lpp"
{ return token::GE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 103 "holidayscannerplan.lpp"
{ return token::LT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 104 "holidayscannerplan.lpp"
{ return token::GT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 105 "holidayscannerplan.lpp"
{ return token::AND;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 106 "holidayscannerplan.lpp"
{ return token::OR; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 108 "holidayscannerplan.lpp"
{ yylval->ival =      1; return token::NUMBER; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 109 "holidayscannerplan.lpp"
{ yylval->ival =      2; return token::NUMBER; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 110 "holidayscannerplan.lpp"
{ yylval->ival =      3; return token::NUMBER; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 111 "holidayscannerplan.lpp"
{ yylval->ival =      4; return token::NUMBER; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 112 "holidayscannerplan.lpp"
{ yylval->ival =      5; return token::NUMBER; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 113 "holidayscannerplan.lpp"
{ yylval->ival =  99999; return token::NUMBER; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 114 "holidayscannerplan.lpp"
{ yylval->ival = -99999; return token::NUMBER; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 116 "holidayscannerplan.lpp"
{ yylval->ival =  -1; return token::NUMBER; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 117 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::NUMBER; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 119 "holidayscannerplan.lpp"
{ yylval->sval = "gregorian"; return token::CALENDAR; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 120 "holidayscannerplan.lpp"
{ yylval->sval = "julian"; return token::CALENDAR; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 122 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 123 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 124 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 125 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 126 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 127 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 128 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 129 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 130 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 131 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 132 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 133 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 135 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 136 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 137 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 138 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 139 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 140 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 141 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 143 "holidayscannerplan.lpp"
{ yylval->sval = "coptic"; return token::CALENDAR; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 145 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 146 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 147 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 148 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 149 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 150 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 151 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 152 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 153 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 154 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 155 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 156 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 157 "holidayscannerplan.lpp"
{ yylval->ival =  13; return token::MONTH; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 159 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 160 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 161 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 162 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 163 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 164 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 165 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 167 "holidayscannerplan.lpp"
{ yylval->sval = "ethiopian"; return token::CALENDAR; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 169 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 170 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 171 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 172 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 173 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 174 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 175 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 176 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 177 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 178 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 179 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 180 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 181 "holidayscannerplan.lpp"
{ yylval->ival =  13; return token::MONTH; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 183 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 184 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 185 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 186 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 187 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 188 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 189 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "holidayscannerplan.lpp"
{ yylval->sval = "hebrew"; return token::CALENDAR; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 193 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 194 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 195 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 196 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 197 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 198 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 199 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 200 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 201 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 202 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 203 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 204 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 205 "holidayscannerplan.lpp"
{ yylval->ival =  13; return token::MONTH; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 206 "holidayscannerplan.lpp"
{ yylval->ival =  14; return token::MONTH; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 208 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 209 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 210 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 211 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 212 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 213 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 214 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 216 "holidayscannerplan.lpp"
{ yylval->sval = "hijri"; return token::CALENDAR; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 218 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 219 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 220 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 221 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 222 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 223 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 224 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 225 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 226 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 227 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 228 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 229 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 231 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 232 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 233 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 234 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 235 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 236 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 237 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 239 "holidayscannerplan.lpp"
{ yylval->sval = "indian-national"; return token::CALENDAR; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 241 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 242 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 243 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 244 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 245 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 246 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 247 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 248 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 249 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 250 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 251 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 252 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 254 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 255 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 256 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 257 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 258 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 259 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 260 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 262 "holidayscannerplan.lpp"
{ yylval->sval = "jalali"; return token::CALENDAR; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 264 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 265 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 266 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 267 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 268 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 269 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 270 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 271 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 272 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 273 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 274 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 275 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 277 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 278 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 279 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 280 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 281 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 282 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 283 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 285 "holidayscannerplan.lpp"
{ driver.error( *yylloc, QString("Holiday Scanner Plan: Invalid Character: %1").arg( yytext ) ); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 287 "holidayscannerplan.lpp"
ECHO;
	YY_BREAK
#line 2716 "holidayscannerplan.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 936 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 936 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 935);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 287 "holidayscannerplan.lpp"



// Skeleton says is easier to implement here to have access to yy variables.

void KHolidays::HolidayParserDriverPlan::scannerInitialise()
{
    yy_flex_debug = m_traceScanning;
    if ( !( yyin = fopen( m_filePath.toLocal8Bit(), "r" ) ) ) {
        error( "cannot open " + m_filePath );
    }
}

void KHolidays::HolidayParserDriverPlan::scannerReset()
{
    //TODO rest counters???
    rewind( yyin );
}

void KHolidays::HolidayParserDriverPlan::scannerTerminate()
{
    fclose( yyin );
}

