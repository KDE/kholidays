#line 2 "holidayscannerplan.cpp"

#line 4 "holidayscannerplan.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 199
#define YY_END_OF_BUFFER 200
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[935] =
    {   0,
        0,    0,  200,  198,    3,    4,    5,  198,  198,    5,
      198,    9,    9,    9,    9,    9,    9,   40,  198,   41,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,    5,    3,    4,   37,    0,   10,
        0,    1,   42,    9,    0,    0,    0,    0,    0,   38,
       36,   39,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  127,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   17,   16,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   14,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   15,    0,    0,
        0,    0,    0,    0,    0,   43,    0,    2,   44,   45,
       46,   47,   48,    0,    0,    0,    0,   50,    0,  113,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   12,    0,  188,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   59,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   28,    0,  111,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  100,    0,    0,    0,    0,
      182,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  186,  122,    0,    0,    0,
        0,    0,    0,  187,    0,    0,    0,    0,   31,    0,
        0,    0,    0,   33,   13,    0,    0,    0,  115,  128,
       85,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  124,    0,    0,    0,   61,    0,    0,   60,
        0,    0,    0,    0,    0,    0,    0,   49,    0,    0,
        0,    0,  169,    0,    0,    0,  185,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   18,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  105,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   79,    0,    0,    0,    0,    0,
        0,    0,    0,   21,    0,    0,    0,    0,    0,  129,
       52,    0,   58,    0,    0,    0,    0,    0,    0,   27,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   11,
        0,    0,   48,   44,    0,    0,    0,   29,    0,    0,
      106,  112,    0,    0,   98,    0,  138,    0,    0,    0,

        0,    0,  195,    0,    0,    0,   78,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   57,    0,    0,    0,
       19,    0,    0,    0,    0,    0,  123,    0,    0,    0,
        0,    0,   84,   76,    0,    0,    0,    0,  168,    0,
        0,    0,    0,    0,   92,   91,    0,    0,  145,    0,
        0,    0,  140,    0,    0,    0,  109,    0,    0,    0,
        0,    0,    0,    0,   26,    0,    0,  121,  125,   20,
        0,    0,    0,    0,  126,    0,  120,   46,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   34,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  130,    0,    0,

      165,   62,  189,   51,    0,    0,    0,    0,   74,    0,
        0,   23,  190,    0,    0,    0,   47,   71,  104,    0,
        0,   77,  116,    0,    0,  178,    0,   54,    0,    0,
      166,    0,  119,    0,    0,    0,   25,    0,    0,    0,
        0,   80,    0,   86,    0,   67,  183,    0,  107,    0,
        0,    0,    0,    0,    0,    0,   24,    0,    0,   88,
        0,    0,    0,  114,    0,    0,    0,    6,    0,    0,
       45,    0,    0,  146,    0,    0,  196,    0,    0,    0,
        0,    0,   73,   99,    0,   75,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   30,

        0,    0,    0,    0,    0,    0,    0,  162,    0,    0,
        0,  159,    0,    0,    0,    0,    0,    0,    0,  118,
        0,   55,    0,    0,  181,    0,    0,    0,  102,   32,
        0,    0,    0,  103,    0,    0,   64,    0,  108,    0,
        0,    0,   83,   90,  170,    0,    0,    0,    0,  147,
      177,    0,    0,    0,    0,  136,    0,  148,    0,    0,
        0,    0,   97,    0,    0,    0,  117,    0,   68,    0,
        0,   35,  101,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       66,  191,    0,    0,   56,    0,  174,    0,    0,    0,

        0,    7,   22,  110,  172,   96,  139,   65,    0,    0,
        0,   82,    0,   89,    0,    0,  176,   72,    0,  192,
        0,    0,  163,  171,    0,    0,    0,   70,   94,  160,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      133,    0,  131,    0,    0,    0,  164,  173,    0,   95,
      179,   53,    0,    0,  161,    0,    0,    0,    0,   93,
        0,    0,   63,  184,    8,  175,    0,    0,   69,    0,
        0,    0,    0,    0,    0,    0,  197,    0,  137,  135,
        0,  167,    0,    0,    0,    0,   87,    0,  194,   81,
      141,    0,    0,  149,    0,  157,    0,    0,    0,    0,

      156,    0,  132,    0,    0,    0,    0,  180,    0,  150,
        0,  153,    0,  155,    0,  134,  193,    0,    0,    0,
      142,    0,    0,    0,    0,  143,    0,  152,  151,  154,
      158,    0,  144,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    1,    7,
        7,    7,    7,    1,    7,    7,    7,    9,   10,   11,
       12,   13,   14,    9,    9,    9,    9,   15,    1,   16,
       17,   18,    7,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,    1,   42,   43,
        7,    1,    7,    1,    1,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,    1,
       67,   68,    1,   69,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[938] =
    {   0,
        0,  298,  287, 1931,  281,  276,  261,  268,  261, 1931,
      226,   61,   67,   73,   79,   85,   97,  215,  210,  168,
      141,   94,   86,   99,  191,  197,  128,  160,  169,  155,
      233,  102,  224,  238,   95,  278,   78,  270,  323,  369,
       95,  244,  279,  103,  166,  166,  159, 1931,  150, 1931,
      151, 1931, 1931,  425,   96,  148,  149,  156,  187, 1931,
     1931, 1931,  195,  196,  185,  201,  202,  238,  255,  254,
      256, 1931,  275,  281,  285,  291,  319,  289,  301,  296,
      320,  301,  326,  307,  311,  312,  313,  334,  335,  334,
      338,  329,  346,  365,  341,  366,  362,  374,  363,  369,

      408,  376, 1931,  384,  396,  411,  416,  423,  408,  416,
      438,  412,  422,  433,  456,  452,  451,  455,  435,  454,
      457,  455,  458, 1931,  475,  499,  478,  482,  465,  511,
      482,  503,  539,  521,  508,  509,  553,  561,  499,  529,
      520,  554,  551,  581,  591,  591,  533,  561,  566,  571,
      609,  582,  596,  610,  589, 1931,  133, 1931, 1931, 1931,
     1931, 1931, 1931,  601,  600,  614,  619, 1931,  617, 1931,
      629,  608,  615,  628,  633,  645,  647,  648,  648,  651,
      637,  647,  643,  658, 1931,  656,  645,  663,  656,  653,
      669,  662,  654,  654,  661,  660,  664,  673,  694,  697,

      695,  682,  694,  699,  691,  709,  703,  694,  704,  696,
      716,  697,  717,  728,  714,  711,  701,  704,  722,  736,
      739,  743,  732,  737,  749,  756,  740,  753,  759, 1931,
      745,  757,  746,  768,  766,  767,  775,  778,  779,  778,
      776,  789,  778,  790,  793,  797,  803,  784,  792,  799,
      802,  796,  815,  803,  804,  805,  820,  813,  825,  828,
      821, 1931,  824, 1931,  840,  839,  828,  835,  838,  848,
      836,  849,  857,  854,  843,  861,  862,  863,  855,  867,
      851,  866,  853,  855,  858, 1931,  878,  873,  883,  899,
     1931,  891,  884,  898,  887,  888,  895,  899,  891,  911,

      913,  895,  896,  906,  926, 1931,  912,  904,  922,  921,
      937,  939,  930, 1931,  949,  934,  935,  945, 1931,  956,
      958,  940,  952, 1931, 1931,  949,  962,  959, 1931, 1931,
     1931,  951,  952,  944,  970,  951,  968,  959,  960,  982,
      976,  980,  980,  976,  994,  981,  987,  998,  988,  985,
     1000, 1009, 1931,  999, 1011, 1012, 1931, 1013, 1010, 1931,
      998, 1009, 1017, 1011, 1021, 1020, 1009, 1931, 1009, 1021,
     1042, 1031, 1931, 1043, 1048, 1042, 1931, 1043, 1048, 1038,
     1038, 1034, 1059, 1060, 1044, 1044, 1050, 1052, 1065, 1066,
     1058, 1053, 1071, 1074, 1067, 1068, 1083, 1079, 1087, 1083,

     1098, 1093, 1931, 1100, 1090, 1085, 1086, 1096, 1109, 1109,
     1108, 1112, 1099, 1097, 1095, 1100, 1107, 1107, 1931, 1121,
     1128, 1143, 1112, 1131, 1118, 1128, 1129, 1128, 1132, 1139,
     1144, 1135, 1158, 1159, 1160, 1137, 1158, 1144, 1161, 1146,
     1156, 1152, 1154, 1167, 1931, 1175, 1172, 1178, 1186, 1189,
     1175, 1186, 1198, 1931, 1192, 1187, 1195, 1201, 1199, 1200,
     1931, 1210, 1931, 1204, 1199, 1194, 1201, 1212, 1217, 1931,
     1199, 1204, 1208, 1226, 1228, 1219, 1223, 1240, 1229, 1931,
     1230, 1248, 1931, 1931, 1242, 1228, 1233, 1931, 1238, 1256,
     1931, 1931, 1241, 1237, 1931, 1260, 1931, 1248, 1254, 1246,

     1251, 1263, 1931, 1260, 1260, 1271, 1931, 1254, 1265, 1279,
     1278, 1283, 1285, 1275, 1291, 1287, 1931, 1282, 1284, 1298,
     1931, 1282, 1283, 1305, 1292, 1306, 1931, 1310, 1308, 1309,
     1310, 1309, 1931, 1931, 1310, 1300, 1321, 1312, 1931, 1314,
     1309, 1312, 1340, 1339, 1931, 1931, 1340, 1336, 1931, 1348,
     1332, 1338, 1931, 1352, 1352, 1353, 1931, 1346, 1346, 1347,
     1361, 1354, 1359, 1364, 1931, 1353, 1367, 1931, 1931, 1931,
     1370, 1350, 1352, 1360, 1931, 1367, 1931, 1931, 1363, 1383,
     1390, 1390, 1397, 1398, 1401, 1384, 1392, 1931, 1398, 1389,
     1398, 1410, 1389, 1412, 1392, 1396, 1417, 1931, 1393, 1417,

     1931, 1931, 1931, 1931, 1405, 1429, 1414, 1440, 1931, 1439,
     1443, 1931, 1931, 1439, 1445, 1432, 1931, 1931, 1931, 1443,
     1435, 1931, 1931, 1442, 1443, 1931, 1435, 1931, 1459, 1441,
     1931, 1458, 1931, 1462, 1457, 1464, 1931, 1447, 1467, 1457,
     1450, 1931, 1471, 1931, 1478, 1931, 1931, 1479, 1931, 1478,
     1473, 1486, 1481, 1497, 1484, 1480, 1931, 1483, 1482, 1931,
     1492, 1487, 1495, 1931, 1509, 1497, 1511, 1931, 1495, 1513,
     1931, 1513, 1515, 1931, 1498, 1499, 1931, 1510, 1525, 1516,
     1515, 1540, 1931, 1931, 1524, 1931, 1536, 1539, 1548, 1526,
     1541, 1529, 1545, 1553, 1555, 1540, 1553, 1578, 1551, 1931,

     1554, 1559, 1563, 1562, 1561, 1574, 1590, 1931, 1593, 1577,
     1590, 1931, 1581, 1595, 1601, 1594, 1582, 1606, 1608, 1931,
     1609, 1931, 1610, 1607, 1931, 1615, 1613, 1603, 1931, 1931,
     1611, 1628, 1617, 1931, 1620, 1619, 1931, 1633, 1931, 1625,
     1621, 1639, 1931, 1931, 1931, 1630, 1627, 1625, 1641, 1931,
     1931, 1649, 1628, 1648, 1651, 1931, 1656, 1931, 1646, 1659,
     1660, 1647, 1931, 1657, 1664, 1647, 1931, 1671, 1931, 1671,
     1679, 1931, 1931, 1662, 1679, 1668, 1668, 1683, 1693, 1693,
     1689, 1690, 1685, 1693, 1695, 1687, 1693, 1705, 1709, 1710,
     1931, 1931, 1701, 1703, 1931, 1704, 1931, 1701, 1714, 1728,

     1715, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1714, 1735,
     1733, 1931, 1725, 1931, 1740, 1743, 1931, 1931, 1727, 1931,
     1729, 1743, 1931, 1931, 1748, 1740, 1751, 1931, 1931, 1931,
     1729, 1744, 1756, 1757, 1752, 1748, 1764, 1765, 1763, 1752,
     1931, 1762, 1931, 1770, 1772, 1782, 1931, 1931, 1773, 1931,
     1931, 1931, 1779, 1790, 1931, 1769, 1786, 1790, 1781, 1931,
     1786, 1798, 1931, 1931, 1931, 1931, 1799, 1794, 1931, 1802,
     1802, 1798, 1795, 1798, 1802, 1797, 1931, 1810, 1931, 1931,
     1812, 1931, 1824, 1814, 1807, 1825, 1931, 1817, 1931, 1931,
     1931, 1824, 1831, 1931, 1821, 1931, 1843, 1844, 1846, 1843,

     1931, 1840, 1931, 1845, 1838, 1852, 1855, 1931, 1848, 1931,
     1851, 1931, 1851, 1931, 1856, 1931, 1931, 1864, 1855, 1867,
     1931, 1870, 1862, 1860, 1868, 1931, 1869, 1931, 1931, 1931,
     1931, 1878, 1931, 1931,  102,  101,   99
    } ;

static yyconst flex_int16_t yy_def[938] =
    {   0,
      934,    1,  934,  934,  934,  934,  934,  935,  936,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  937,  934,  934,  934,  935,  934,
      936,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  937,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,    0,  934,  934,  934
    } ;

static yyconst flex_int16_t yy_nxt[2001] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   10,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,    4,   41,
       42,   43,    4,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,    4,   41,   42,   43,    4,   44,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  157,

      132,   51,   49,   55,   56,   54,   54,   54,   54,   54,
       54,   79,   74,  150,   57,  123,   75,   82,   80,   76,
      113,   83,   58,   77,  114,  132,  124,   81,   55,   56,
      125,   84,   78,  159,   59,  158,   79,   74,  150,   57,
      123,   75,   82,   80,   76,  113,   83,   58,   77,  114,
       97,  124,   81,   52,   50,  125,   84,   78,  159,   59,
       63,   47,   64,   98,   65,   66,   99,   46,  158,  160,
      161,  156,   67,  106,   68,   97,   69,   70,  100,   71,
       72,  162,  101,   73,   62,   63,  102,   64,   98,   65,
       66,   99,  103,  107,  160,  161,  108,   67,  106,   68,

      104,   69,   70,  100,   71,   72,  162,  101,   73,   85,
      105,  102,  163,  164,  165,   92,   86,  103,  107,   93,
       87,  108,  166,   94,   88,  104,   61,   89,   90,   95,
       91,   60,   96,   53,   85,  105,  167,  163,  164,  165,
       92,   86,  115,  168,   93,   87,  116,  166,   94,   88,
      117,  109,   89,   90,   95,   91,  118,   96,  110,  111,
      120,  167,  119,   52,  121,  112,  151,  115,  168,  152,
      122,  116,   50,  169,  170,  117,  109,   48,   47,  171,
      172,  118,   46,  110,  111,  120,  934,  119,  133,  121,
      112,  151,  134,  173,  152,  122,  126,  153,  169,  170,

      127,  154,  135,  128,  171,  172,  174,  129,  175,  176,
      179,  155,   45,  133,  130,  131,  934,  134,  173,  180,
      934,  126,  153,  934,  934,  127,  154,  135,  128,  181,
      934,  174,  129,  175,  176,  179,  155,  177,  182,  130,
      131,  136,  183,  186,  180,  137,  184,  187,  138,  139,
      188,  189,  185,  140,  181,  141,  190,  178,  191,  192,
      193,  142,  177,  182,  194,  195,  136,  183,  186,  934,
      137,  184,  187,  138,  139,  188,  189,  185,  140,  198,
      141,  190,  178,  191,  192,  193,  142,  143,  196,  194,
      195,  144,  199,  200,  145,  146,  201,  147,  202,  203,

      197,  148,  934,  208,  198,  209,  204,  149,  934,  934,
      934,  934,  143,  196,  210,  934,  144,  199,  200,  145,
      146,  201,  147,  202,  203,  197,  148,  205,  208,  206,
      209,  204,  149,   54,   54,   54,   54,   54,   54,  210,
      211,  216,  212,  217,  207,  213,  214,  215,  218,  934,
      221,  224,  205,  222,  206,  934,  219,  934,  223,  934,
      237,  934,  934,  934,  225,  211,  216,  212,  217,  207,
      213,  214,  215,  218,  220,  221,  224,  231,  222,  238,
      226,  219,  233,  223,  227,  237,  235,  228,  232,  225,
      236,  229,  234,  239,  240,  241,  242,  230,  934,  220,

      251,  249,  231,  252,  238,  226,  934,  233,  256,  227,
      934,  235,  228,  232,  250,  236,  229,  234,  239,  240,
      241,  242,  230,  243,  257,  251,  249,  264,  252,  253,
      244,  245,  265,  256,  246,  247,  254,  248,  278,  250,
      266,  934,  262,  255,  934,  263,  267,  279,  243,  257,
      280,  934,  264,  934,  253,  244,  245,  265,  258,  246,
      247,  254,  248,  278,  934,  266,  259,  262,  255,  260,
      263,  267,  279,  268,  293,  280,  283,  269,  261,  273,
      294,  284,  281,  258,  270,  282,  271,  274,  295,  272,
      934,  259,  934,  275,  260,  934,  276,  296,  268,  293,

      277,  283,  269,  261,  273,  294,  284,  281,  299,  270,
      282,  271,  274,  295,  272,  285,  286,  288,  275,  305,
      287,  276,  296,  289,  300,  277,  291,  292,  302,  290,
      297,  298,  306,  299,  301,  307,  308,  309,  303,  304,
      285,  286,  288,  310,  305,  287,  313,  311,  289,  300,
      314,  291,  292,  302,  290,  297,  298,  306,  315,  301,
      307,  308,  309,  303,  304,  316,  317,  318,  310,  312,
      319,  313,  311,  320,  323,  314,  321,  322,  324,  325,
      326,  327,  328,  315,  329,  330,  331,  332,  333,  334,
      316,  317,  318,  335,  312,  319,  336,  337,  320,  323,

      338,  321,  322,  324,  325,  326,  327,  328,  339,  329,
      330,  331,  332,  333,  334,  340,  341,  342,  335,  343,
      344,  336,  337,  345,  347,  338,  348,  349,  350,  351,
      352,  353,  346,  339,  354,  355,  360,  361,  362,  363,
      340,  341,  342,  356,  343,  344,  358,  364,  345,  347,
      359,  348,  349,  350,  351,  352,  353,  346,  357,  354,
      355,  360,  361,  362,  363,  365,  366,  367,  356,  368,
      369,  358,  364,  370,  371,  359,  374,  375,  372,  376,
      377,  373,  378,  357,  381,  379,  382,  383,  384,  380,
      365,  366,  367,  385,  368,  369,  386,  387,  370,  371,

      388,  374,  375,  372,  376,  377,  373,  378,  389,  381,
      379,  382,  383,  384,  380,  390,  391,  392,  385,  395,
      399,  386,  387,  397,  393,  388,  394,  396,  398,  400,
      401,  402,  403,  389,  404,  405,  406,  407,  408,  409,
      390,  391,  392,  410,  395,  399,  411,  412,  397,  393,
      413,  394,  396,  398,  400,  401,  402,  403,  414,  404,
      405,  406,  407,  408,  409,  415,  416,  417,  410,  418,
      419,  411,  412,  420,  421,  413,  422,  426,  427,  428,
      429,  430,  423,  414,  431,  432,  433,  434,  424,  435,
      415,  416,  417,  436,  418,  419,  437,  425,  420,  421,

      438,  422,  426,  427,  428,  429,  430,  423,  439,  431,
      432,  433,  434,  424,  435,  440,  443,  441,  436,  444,
      445,  437,  425,  446,  447,  438,  448,  449,  450,  451,
      454,  452,  455,  439,  442,  456,  934,  934,  460,  461,
      440,  443,  441,  453,  444,  445,  457,  462,  446,  447,
      463,  448,  449,  450,  451,  454,  452,  455,  464,  442,
      456,  458,  459,  460,  461,  465,  466,  467,  453,  468,
      469,  457,  462,  470,  471,  463,  472,  473,  474,  475,
      476,  477,  478,  464,  479,  480,  458,  459,  481,  482,
      465,  466,  467,  483,  468,  469,  484,  485,  470,  471,

      486,  472,  473,  474,  475,  476,  477,  478,  487,  479,
      480,  488,  489,  481,  482,  490,  491,  492,  483,  493,
      494,  484,  485,  495,  496,  486,  497,  498,  499,  500,
      501,  502,  503,  487,  504,  505,  488,  489,  506,  507,
      490,  491,  492,  508,  493,  494,  509,  510,  495,  496,
      511,  497,  498,  499,  500,  501,  502,  503,  512,  504,
      505,  513,  514,  506,  507,  515,  516,  517,  508,  518,
      519,  509,  510,  520,  521,  511,  522,  523,  524,  525,
      526,  527,  528,  512,  529,  530,  513,  514,  531,  532,
      515,  516,  517,  533,  518,  519,  534,  535,  520,  521,

      536,  522,  523,  524,  525,  526,  527,  528,  537,  529,
      530,  538,  539,  531,  532,  540,  541,  542,  533,  543,
      544,  534,  535,  545,  546,  536,  547,  548,  549,  550,
      551,  552,  553,  537,  554,  555,  538,  539,  556,  557,
      540,  541,  542,  558,  543,  544,  559,  562,  545,  546,
      563,  547,  548,  549,  550,  551,  552,  553,  564,  554,
      555,  560,  561,  556,  557,  565,  566,  567,  558,  568,
      569,  559,  562,  570,  571,  563,  572,  573,  574,  575,
      576,  577,  578,  564,  579,  580,  560,  561,  581,  582,
      565,  566,  567,  583,  568,  569,  584,  585,  570,  571,

      586,  572,  573,  574,  575,  576,  577,  578,  587,  579,
      580,  588,  589,  581,  582,  590,  591,  592,  583,  593,
      594,  584,  585,  595,  597,  586,  598,  596,  599,  600,
      601,  602,  603,  587,  604,  605,  588,  589,  606,  607,
      590,  591,  592,  608,  593,  594,  609,  610,  595,  597,
      611,  598,  596,  599,  600,  601,  602,  603,  612,  604,
      605,  613,  614,  606,  607,  615,  616,  617,  608,  618,
      619,  609,  610,  620,  621,  611,  622,  623,  624,  625,
      626,  627,  628,  612,  629,  630,  613,  614,  631,  632,
      615,  616,  617,  633,  618,  619,  634,  635,  620,  621,

      636,  622,  623,  624,  625,  626,  627,  628,  637,  629,
      630,  638,  639,  631,  632,  640,  641,  642,  633,  643,
      644,  634,  635,  645,  646,  636,  647,  648,  649,  650,
      651,  652,  653,  637,  654,  655,  638,  639,  656,  657,
      640,  641,  642,  658,  643,  644,  659,  660,  645,  646,
      661,  647,  648,  649,  650,  651,  652,  653,  662,  654,
      655,  663,  664,  656,  657,  665,  666,  667,  658,  668,
      669,  659,  660,  670,  671,  661,  672,  673,  674,  675,
      676,  677,  678,  662,  679,  680,  663,  664,  681,  682,
      665,  666,  667,  683,  668,  669,  684,  685,  670,  671,

      686,  672,  673,  674,  675,  676,  677,  678,  687,  679,
      680,  689,  690,  681,  682,  691,  692,  688,  683,  693,
      694,  684,  685,  695,  696,  686,  697,  698,  699,  700,
      701,  702,  703,  687,  707,  708,  689,  690,  709,  704,
      691,  692,  688,  705,  693,  694,  706,  710,  695,  696,
      711,  697,  698,  699,  700,  701,  702,  703,  712,  707,
      708,  713,  714,  709,  704,  715,  716,  717,  705,  718,
      719,  706,  710,  720,  721,  711,  722,  723,  724,  725,
      726,  727,  728,  712,  729,  730,  713,  714,  731,  732,
      715,  716,  717,  733,  718,  719,  734,  735,  720,  721,

      736,  722,  723,  724,  725,  726,  727,  728,  737,  729,
      730,  738,  739,  731,  732,  740,  741,  742,  733,  743,
      744,  734,  735,  745,  746,  736,  747,  748,  750,  751,
      752,  753,  754,  737,  755,  756,  738,  739,  757,  758,
      740,  741,  742,  759,  743,  744,  749,  760,  745,  746,
      761,  747,  748,  750,  751,  752,  753,  754,  762,  755,
      756,  763,  764,  757,  758,  765,  766,  767,  759,  768,
      769,  749,  760,  770,  771,  761,  772,  773,  774,  934,
      934,  934,  780,  762,  781,  782,  763,  764,  783,  934,
      765,  766,  767,  784,  768,  769,  775,  785,  770,  771,

      786,  772,  773,  774,  776,  777,  778,  780,  787,  781,
      782,  788,  789,  783,  779,  790,  791,  792,  784,  793,
      794,  775,  785,  795,  796,  786,  797,  798,  799,  776,
      777,  778,  800,  787,  801,  802,  788,  789,  803,  779,
      790,  791,  792,  804,  793,  794,  805,  806,  795,  796,
      807,  797,  798,  799,  808,  809,  810,  800,  811,  801,
      802,  812,  813,  803,  814,  815,  816,  817,  804,  818,
      819,  805,  806,  820,  821,  807,  822,  823,  824,  808,
      809,  810,  825,  811,  826,  827,  812,  813,  828,  814,
      815,  816,  817,  829,  818,  819,  830,  831,  820,  821,

      832,  822,  823,  824,  833,  835,  836,  825,  837,  826,
      827,  838,  839,  828,  834,  840,  841,  842,  829,  843,
      844,  830,  831,  845,  846,  832,  847,  848,  849,  833,
      835,  836,  850,  837,  851,  852,  838,  839,  853,  834,
      840,  841,  842,  854,  843,  844,  855,  856,  845,  846,
      857,  847,  848,  849,  858,  859,  860,  850,  861,  851,
      852,  862,  863,  853,  864,  865,  866,  867,  854,  868,
      869,  855,  856,  870,  871,  857,  872,  873,  874,  858,
      859,  860,  875,  861,  876,  877,  862,  863,  878,  864,
      865,  866,  867,  879,  868,  869,  880,  881,  870,  871,

      882,  872,  873,  874,  883,  884,  887,  875,  885,  876,
      877,  888,  889,  878,  890,  891,  892,  893,  879,  894,
      895,  880,  881,  896,  897,  882,  898,  886,  899,  883,
      884,  887,  900,  885,  901,  902,  888,  889,  903,  890,
      891,  892,  893,  904,  894,  895,  905,  906,  896,  897,
      907,  898,  886,  899,  908,  909,  910,  900,  911,  901,
      902,  912,  913,  903,  914,  915,  916,  917,  904,  918,
      919,  905,  906,  920,  921,  907,  922,  923,  924,  908,
      909,  910,  925,  911,  926,  927,  912,  913,  928,  914,
      915,  916,  917,  929,  918,  919,  930,  931,  920,  921,

      932,  922,  923,  924,  933,  934,  934,  925,  934,  926,
      927,  934,  934,  928,  934,  934,  934,  934,  929,  934,
      934,  930,  931,  934,  934,  932,  934,  934,  934,  933,
        3,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934

    } ;

static yyconst flex_int16_t yy_chk[2001] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   12,
       12,   12,   12,   12,   12,   13,   13,   13,   13,   13,
       13,   14,   14,   14,   14,   14,   14,   15,   15,   15,
       15,   15,   15,   16,   16,   16,   16,   16,   16,  937,

       37,  936,  935,   13,   14,   17,   17,   17,   17,   17,
       17,   23,   22,   41,   15,   35,   22,   24,   23,   22,
       32,   24,   16,   22,   32,   37,   35,   23,   13,   14,
       35,   24,   22,   55,   17,  157,   23,   22,   41,   15,
       35,   22,   24,   23,   22,   32,   24,   16,   22,   32,
       27,   35,   23,   51,   49,   35,   24,   22,   55,   17,
       21,   47,   21,   27,   21,   21,   27,   46,   45,   56,
       57,   44,   21,   30,   21,   27,   21,   21,   28,   21,
       21,   58,   28,   21,   20,   21,   28,   21,   27,   21,
       21,   27,   29,   30,   56,   57,   30,   21,   30,   21,

       29,   21,   21,   28,   21,   21,   58,   28,   21,   25,
       29,   28,   59,   63,   64,   26,   25,   29,   30,   26,
       25,   30,   65,   26,   25,   29,   19,   25,   25,   26,
       25,   18,   26,   11,   25,   29,   66,   59,   63,   64,
       26,   25,   33,   67,   26,   25,   33,   65,   26,   25,
       33,   31,   25,   25,   26,   25,   33,   26,   31,   31,
       34,   66,   33,    9,   34,   31,   42,   33,   67,   42,
       34,   33,    8,   68,   69,   33,   31,    7,    6,   70,
       71,   33,    5,   31,   31,   34,    3,   33,   38,   34,
       31,   42,   38,   73,   42,   34,   36,   43,   68,   69,

       36,   43,   38,   36,   70,   71,   74,   36,   75,   76,
       78,   43,    2,   38,   36,   36,    0,   38,   73,   79,
        0,   36,   43,    0,    0,   36,   43,   38,   36,   80,
        0,   74,   36,   75,   76,   78,   43,   77,   81,   36,
       36,   39,   82,   84,   79,   39,   83,   85,   39,   39,
       86,   87,   83,   39,   80,   39,   88,   77,   89,   90,
       91,   39,   77,   81,   92,   93,   39,   82,   84,    0,
       39,   83,   85,   39,   39,   86,   87,   83,   39,   95,
       39,   88,   77,   89,   90,   91,   39,   40,   94,   92,
       93,   40,   96,   97,   40,   40,   98,   40,   99,  100,

       94,   40,    0,  102,   95,  104,  100,   40,    0,    0,
        0,    0,   40,   94,  105,    0,   40,   96,   97,   40,
       40,   98,   40,   99,  100,   94,   40,  101,  102,  101,
      104,  100,   40,   54,   54,   54,   54,   54,   54,  105,
      106,  108,  106,  109,  101,  107,  107,  107,  110,    0,
      112,  114,  101,  113,  101,    0,  111,    0,  113,    0,
      119,    0,    0,    0,  114,  106,  108,  106,  109,  101,
      107,  107,  107,  110,  111,  112,  114,  116,  113,  120,
      115,  111,  117,  113,  115,  119,  118,  115,  116,  114,
      118,  115,  117,  121,  122,  123,  125,  115,    0,  111,

      128,  127,  116,  129,  120,  115,    0,  117,  131,  115,
        0,  118,  115,  116,  127,  118,  115,  117,  121,  122,
      123,  125,  115,  126,  132,  128,  127,  135,  129,  130,
      126,  126,  136,  131,  126,  126,  130,  126,  139,  127,
      136,    0,  134,  130,    0,  134,  136,  140,  126,  132,
      141,    0,  135,    0,  130,  126,  126,  136,  133,  126,
      126,  130,  126,  139,    0,  136,  133,  134,  130,  133,
      134,  136,  140,  137,  147,  141,  143,  137,  133,  138,
      148,  143,  142,  133,  137,  142,  137,  138,  149,  137,
        0,  133,    0,  138,  133,    0,  138,  150,  137,  147,

      138,  143,  137,  133,  138,  148,  143,  142,  152,  137,
      142,  137,  138,  149,  137,  144,  144,  145,  138,  155,
      144,  138,  150,  145,  153,  138,  146,  146,  154,  145,
      151,  151,  164,  152,  153,  165,  166,  167,  154,  154,
      144,  144,  145,  169,  155,  144,  172,  171,  145,  153,
      173,  146,  146,  154,  145,  151,  151,  164,  174,  153,
      165,  166,  167,  154,  154,  175,  176,  177,  169,  171,
      178,  172,  171,  179,  181,  173,  180,  180,  182,  183,
      184,  186,  187,  174,  188,  189,  190,  191,  192,  193,
      175,  176,  177,  194,  171,  178,  195,  196,  179,  181,

      197,  180,  180,  182,  183,  184,  186,  187,  198,  188,
      189,  190,  191,  192,  193,  199,  200,  201,  194,  201,
      202,  195,  196,  203,  204,  197,  205,  206,  207,  208,
      209,  210,  203,  198,  211,  212,  215,  216,  217,  218,
      199,  200,  201,  213,  201,  202,  214,  219,  203,  204,
      214,  205,  206,  207,  208,  209,  210,  203,  213,  211,
      212,  215,  216,  217,  218,  220,  221,  222,  213,  223,
      224,  214,  219,  225,  226,  214,  227,  228,  226,  229,
      231,  226,  232,  213,  233,  232,  234,  235,  236,  232,
      220,  221,  222,  237,  223,  224,  238,  239,  225,  226,

      240,  227,  228,  226,  229,  231,  226,  232,  241,  233,
      232,  234,  235,  236,  232,  242,  243,  244,  237,  246,
      248,  238,  239,  247,  245,  240,  245,  246,  247,  249,
      250,  251,  252,  241,  253,  254,  255,  256,  257,  258,
      242,  243,  244,  259,  246,  248,  260,  261,  247,  245,
      263,  245,  246,  247,  249,  250,  251,  252,  265,  253,
      254,  255,  256,  257,  258,  266,  267,  268,  259,  269,
      270,  260,  261,  271,  272,  263,  273,  274,  275,  276,
      277,  278,  273,  265,  279,  280,  281,  282,  273,  283,
      266,  267,  268,  284,  269,  270,  285,  273,  271,  272,

      287,  273,  274,  275,  276,  277,  278,  273,  288,  279,
      280,  281,  282,  273,  283,  289,  292,  290,  284,  293,
      294,  285,  273,  295,  296,  287,  297,  298,  299,  300,
      302,  301,  303,  288,  290,  304,    0,    0,  307,  308,
      289,  292,  290,  301,  293,  294,  305,  309,  295,  296,
      310,  297,  298,  299,  300,  302,  301,  303,  311,  290,
      304,  305,  305,  307,  308,  312,  313,  315,  301,  316,
      317,  305,  309,  318,  320,  310,  321,  322,  323,  326,
      327,  328,  332,  311,  333,  334,  305,  305,  335,  336,
      312,  313,  315,  337,  316,  317,  338,  339,  318,  320,

      340,  321,  322,  323,  326,  327,  328,  332,  341,  333,
      334,  342,  343,  335,  336,  344,  345,  346,  337,  347,
      348,  338,  339,  349,  350,  340,  351,  352,  354,  355,
      356,  358,  359,  341,  361,  362,  342,  343,  363,  364,
      344,  345,  346,  365,  347,  348,  366,  367,  349,  350,
      369,  351,  352,  354,  355,  356,  358,  359,  370,  361,
      362,  371,  372,  363,  364,  374,  375,  376,  365,  378,
      379,  366,  367,  380,  381,  369,  382,  383,  384,  385,
      386,  387,  388,  370,  389,  390,  371,  372,  391,  392,
      374,  375,  376,  393,  378,  379,  394,  395,  380,  381,

      396,  382,  383,  384,  385,  386,  387,  388,  397,  389,
      390,  398,  399,  391,  392,  400,  401,  402,  393,  404,
      405,  394,  395,  406,  407,  396,  408,  409,  410,  411,
      412,  413,  414,  397,  415,  416,  398,  399,  417,  418,
      400,  401,  402,  420,  404,  405,  421,  423,  406,  407,
      424,  408,  409,  410,  411,  412,  413,  414,  425,  415,
      416,  422,  422,  417,  418,  426,  427,  428,  420,  429,
      430,  421,  423,  431,  432,  424,  433,  434,  435,  436,
      437,  438,  439,  425,  440,  441,  422,  422,  442,  443,
      426,  427,  428,  444,  429,  430,  446,  447,  431,  432,

      448,  433,  434,  435,  436,  437,  438,  439,  449,  440,
      441,  450,  451,  442,  443,  452,  453,  455,  444,  456,
      457,  446,  447,  458,  459,  448,  460,  458,  462,  464,
      465,  466,  467,  449,  468,  469,  450,  451,  471,  472,
      452,  453,  455,  473,  456,  457,  474,  475,  458,  459,
      476,  460,  458,  462,  464,  465,  466,  467,  477,  468,
      469,  478,  479,  471,  472,  481,  482,  485,  473,  486,
      487,  474,  475,  489,  490,  476,  493,  494,  496,  498,
      499,  500,  501,  477,  502,  504,  478,  479,  505,  506,
      481,  482,  485,  508,  486,  487,  509,  510,  489,  490,

      511,  493,  494,  496,  498,  499,  500,  501,  512,  502,
      504,  513,  514,  505,  506,  515,  516,  518,  508,  519,
      520,  509,  510,  522,  523,  511,  524,  525,  526,  528,
      529,  530,  531,  512,  532,  535,  513,  514,  536,  537,
      515,  516,  518,  538,  519,  520,  540,  541,  522,  523,
      542,  524,  525,  526,  528,  529,  530,  531,  543,  532,
      535,  544,  547,  536,  537,  548,  550,  551,  538,  552,
      554,  540,  541,  555,  556,  542,  558,  559,  560,  561,
      562,  563,  564,  543,  566,  567,  544,  547,  571,  572,
      548,  550,  551,  573,  552,  554,  574,  576,  555,  556,

      579,  558,  559,  560,  561,  562,  563,  564,  580,  566,
      567,  581,  582,  571,  572,  583,  584,  580,  573,  585,
      586,  574,  576,  587,  589,  579,  590,  591,  592,  593,
      594,  595,  596,  580,  599,  600,  581,  582,  605,  597,
      583,  584,  580,  597,  585,  586,  597,  606,  587,  589,
      607,  590,  591,  592,  593,  594,  595,  596,  608,  599,
      600,  610,  611,  605,  597,  614,  615,  616,  597,  620,
      621,  597,  606,  624,  625,  607,  627,  629,  630,  632,
      634,  635,  636,  608,  638,  639,  610,  611,  640,  641,
      614,  615,  616,  643,  620,  621,  645,  648,  624,  625,

      650,  627,  629,  630,  632,  634,  635,  636,  651,  638,
      639,  652,  653,  640,  641,  654,  655,  656,  643,  658,
      659,  645,  648,  661,  662,  650,  663,  665,  666,  667,
      669,  670,  672,  651,  673,  675,  652,  653,  676,  678,
      654,  655,  656,  679,  658,  659,  665,  680,  661,  662,
      681,  663,  665,  666,  667,  669,  670,  672,  682,  673,
      675,  685,  687,  676,  678,  688,  689,  690,  679,  691,
      692,  665,  680,  693,  694,  681,  695,  696,  697,    0,
        0,    0,  699,  682,  701,  702,  685,  687,  703,    0,
      688,  689,  690,  704,  691,  692,  698,  705,  693,  694,

      706,  695,  696,  697,  698,  698,  698,  699,  707,  701,
      702,  709,  710,  703,  698,  711,  713,  714,  704,  715,
      716,  698,  705,  717,  718,  706,  719,  721,  723,  698,
      698,  698,  724,  707,  726,  727,  709,  710,  728,  698,
      711,  713,  714,  731,  715,  716,  732,  733,  717,  718,
      735,  719,  721,  723,  736,  738,  740,  724,  741,  726,
      727,  742,  746,  728,  747,  748,  749,  752,  731,  753,
      754,  732,  733,  755,  757,  735,  759,  760,  761,  736,
      738,  740,  762,  741,  764,  765,  742,  746,  766,  747,
      748,  749,  752,  768,  753,  754,  770,  771,  755,  757,

      774,  759,  760,  761,  775,  776,  777,  762,  778,  764,
      765,  779,  780,  766,  775,  781,  782,  783,  768,  784,
      785,  770,  771,  786,  787,  774,  788,  789,  790,  775,
      776,  777,  793,  778,  794,  796,  779,  780,  798,  775,
      781,  782,  783,  799,  784,  785,  800,  801,  786,  787,
      809,  788,  789,  790,  810,  811,  813,  793,  815,  794,
      796,  816,  819,  798,  821,  822,  825,  826,  799,  827,
      831,  800,  801,  832,  833,  809,  834,  835,  836,  810,
      811,  813,  837,  815,  838,  839,  816,  819,  840,  821,
      822,  825,  826,  842,  827,  831,  844,  845,  832,  833,

      846,  834,  835,  836,  849,  853,  856,  837,  854,  838,
      839,  857,  858,  840,  859,  861,  862,  867,  842,  868,
      870,  844,  845,  871,  872,  846,  873,  854,  874,  849,
      853,  856,  875,  854,  876,  878,  857,  858,  881,  859,
      861,  862,  867,  883,  868,  870,  884,  885,  871,  872,
      886,  873,  854,  874,  888,  892,  893,  875,  895,  876,
      878,  897,  898,  881,  899,  900,  902,  904,  883,  905,
      906,  884,  885,  907,  909,  886,  911,  913,  915,  888,
      892,  893,  918,  895,  919,  920,  897,  898,  922,  899,
      900,  902,  904,  923,  905,  906,  924,  925,  907,  909,

      927,  911,  913,  915,  932,    0,    0,  918,    0,  919,
      920,    0,    0,  922,    0,    0,    0,    0,  923,    0,
        0,  924,  925,    0,    0,  927,    0,    0,    0,  932,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[199] =
    {   0,
       57,   58,   59,   60,   61,   63,   64,   65,   66,   68,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   83,   84,   85,   86,   87,   89,   90,   91,   92,
       93,   94,   95,   96,   97,   99,  100,  101,  102,  103,
      104,  105,  106,  108,  109,  110,  111,  112,  113,  114,
      116,  117,  119,  120,  122,  123,  124,  125,  126,  127,
      128,  129,  130,  131,  132,  133,  135,  136,  137,  138,
      139,  140,  141,  143,  145,  146,  147,  148,  149,  150,
      151,  152,  153,  154,  155,  156,  157,  159,  160,  161,
      162,  163,  164,  165,  167,  169,  170,  171,  172,  173,

      174,  175,  176,  177,  178,  179,  180,  181,  183,  184,
      185,  186,  187,  188,  189,  191,  193,  194,  195,  196,
      197,  198,  199,  200,  201,  202,  203,  204,  205,  206,
      208,  209,  210,  211,  212,  213,  214,  216,  218,  219,
      220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
      231,  232,  233,  234,  235,  236,  237,  239,  241,  242,
      243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
      254,  255,  256,  257,  258,  259,  260,  262,  264,  265,
      266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
      277,  278,  279,  280,  281,  282,  283,  285

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "holidayscannerplan.lpp"
/*
    Original version from plan by Thomas Driemeyer <thomas@bitrot.de>

    Adapted for use in KOrganizer by
        Preston Brown <pbrown@kde.org> and
        Reinhold Kainhofer <reinhold@kainhofer.com>

    Major rewrite using Bison C++ skeleton:
        Copyright 2010 John Layt <john@layt.net>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to the
    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/
#line 28 "holidayscannerplan.lpp"
# include <cstdlib>
# include <errno.h>
# include <limits.h>
# include <string>
# include "holidayparserdriverplan_p.h"
# include "holidayparserplan.hpp"

# undef yywrap
# define yywrap() 1

#define yyterminate() return token::END
#line 47 "holidayscannerplan.lpp"
# define YY_USER_ACTION  yylloc->columns( yyleng );
#line 1351 "holidayscannerplan.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 50 "holidayscannerplan.lpp"



    yylloc->step();
    typedef KHolidays::HolidayParserPlan::token token;


#line 1602 "holidayscannerplan.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 935 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 934 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 199 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 199 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 200 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 57 "holidayscannerplan.lpp"
{ yylloc->lines( yyleng ); yylloc->step(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 58 "holidayscannerplan.lpp"
{ yylloc->lines( yyleng ); yylloc->step(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 59 "holidayscannerplan.lpp"
{ yylloc->step(); }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 60 "holidayscannerplan.lpp"
{ yylloc->lines( yyleng ); yylloc->step(); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 61 "holidayscannerplan.lpp"
{ return KHolidays::HolidayParserPlan::token_type( *yytext ); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "holidayscannerplan.lpp"
{ return token::REGION; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "holidayscannerplan.lpp"
{ return token::LANGUAGE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "holidayscannerplan.lpp"
{ return token::SHORTNAME; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "holidayscannerplan.lpp"
{ yylval->ival = atoi( yytext ); return token::NUMBER; }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 68 "holidayscannerplan.lpp"
{ yylval->sval = strdup( yytext + 1 );
                      yylval->sval[ strlen( yylval->sval ) - 1 ] = 0;
                      return token::STRING; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "holidayscannerplan.lpp"
;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "holidayscannerplan.lpp"
;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "holidayscannerplan.lpp"
;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "holidayscannerplan.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "holidayscannerplan.lpp"
;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "holidayscannerplan.lpp"
{ return token::INOP; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 78 "holidayscannerplan.lpp"
{ return token::IF; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 79 "holidayscannerplan.lpp"
{ return token::PLUS; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 80 "holidayscannerplan.lpp"
{ return token::MINUS; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "holidayscannerplan.lpp"
{ return token::SMALL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 82 "holidayscannerplan.lpp"
{ return token::YEAR; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 83 "holidayscannerplan.lpp"
{ return token::LEAPYEAR; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "holidayscannerplan.lpp"
{ return token::EASTER; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "holidayscannerplan.lpp"
{ return token::PASCHA; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "holidayscannerplan.lpp"
{ return token::LENGTH; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "holidayscannerplan.lpp"
{ return token::SHIFT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 89 "holidayscannerplan.lpp"
{ yylval->ival = 1; return token::COLOR; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 90 "holidayscannerplan.lpp"
{ yylval->ival = 2; return token::COLOR; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 91 "holidayscannerplan.lpp"
{ yylval->ival = 3; return token::COLOR; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 92 "holidayscannerplan.lpp"
{ yylval->ival = 4; return token::COLOR; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 93 "holidayscannerplan.lpp"
{ yylval->ival = 5; return token::COLOR; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 94 "holidayscannerplan.lpp"
{ yylval->ival = 6; return token::COLOR; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 95 "holidayscannerplan.lpp"
{ yylval->ival = 7; return token::COLOR; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 96 "holidayscannerplan.lpp"
{ yylval->ival = 8; return token::COLOR; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 97 "holidayscannerplan.lpp"
{ yylval->ival = 9; return token::COLOR; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 99 "holidayscannerplan.lpp"
{ return token::EQ; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 100 "holidayscannerplan.lpp"
{ return token::NE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 101 "holidayscannerplan.lpp"
{ return token::LE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 102 "holidayscannerplan.lpp"
{ return token::GE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 103 "holidayscannerplan.lpp"
{ return token::LT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 104 "holidayscannerplan.lpp"
{ return token::GT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 105 "holidayscannerplan.lpp"
{ return token::AND;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 106 "holidayscannerplan.lpp"
{ return token::OR; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 108 "holidayscannerplan.lpp"
{ yylval->ival =      1; return token::NUMBER; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 109 "holidayscannerplan.lpp"
{ yylval->ival =      2; return token::NUMBER; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 110 "holidayscannerplan.lpp"
{ yylval->ival =      3; return token::NUMBER; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 111 "holidayscannerplan.lpp"
{ yylval->ival =      4; return token::NUMBER; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 112 "holidayscannerplan.lpp"
{ yylval->ival =      5; return token::NUMBER; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 113 "holidayscannerplan.lpp"
{ yylval->ival =  99999; return token::NUMBER; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 114 "holidayscannerplan.lpp"
{ yylval->ival = -99999; return token::NUMBER; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 116 "holidayscannerplan.lpp"
{ yylval->ival =  -1; return token::NUMBER; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 117 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::NUMBER; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 119 "holidayscannerplan.lpp"
{ yylval->sval = "gregorian"; return token::CALENDAR; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 120 "holidayscannerplan.lpp"
{ yylval->sval = "julian"; return token::CALENDAR; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 122 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 123 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 124 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 125 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 126 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 127 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 128 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 129 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 130 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 131 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 132 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 133 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 135 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 136 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 137 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 138 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 139 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 140 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 141 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 143 "holidayscannerplan.lpp"
{ yylval->sval = "coptic"; return token::CALENDAR; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 145 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 146 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 147 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 148 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 149 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 150 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 151 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 152 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 153 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 154 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 155 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 156 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 157 "holidayscannerplan.lpp"
{ yylval->ival =  13; return token::MONTH; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 159 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 160 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 161 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 162 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 163 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 164 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 165 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 167 "holidayscannerplan.lpp"
{ yylval->sval = "ethiopian"; return token::CALENDAR; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 169 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 170 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 171 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 172 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 173 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 174 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 175 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 176 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 177 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 178 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 179 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 180 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 181 "holidayscannerplan.lpp"
{ yylval->ival =  13; return token::MONTH; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 183 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 184 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 185 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 186 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 187 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 188 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 189 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "holidayscannerplan.lpp"
{ yylval->sval = "hebrew"; return token::CALENDAR; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 193 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 194 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 195 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 196 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 197 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 198 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 199 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 200 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 201 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 202 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 203 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 204 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 205 "holidayscannerplan.lpp"
{ yylval->ival =  13; return token::MONTH; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 206 "holidayscannerplan.lpp"
{ yylval->ival =  14; return token::MONTH; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 208 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 209 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 210 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 211 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 212 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 213 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 214 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 216 "holidayscannerplan.lpp"
{ yylval->sval = "hijri"; return token::CALENDAR; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 218 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 219 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 220 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 221 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 222 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 223 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 224 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 225 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 226 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 227 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 228 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 229 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 231 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 232 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 233 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 234 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 235 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 236 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 237 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 239 "holidayscannerplan.lpp"
{ yylval->sval = "indian-national"; return token::CALENDAR; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 241 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 242 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 243 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 244 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 245 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 246 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 247 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 248 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 249 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 250 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 251 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 252 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 254 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 255 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 256 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 257 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 258 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 259 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 260 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 262 "holidayscannerplan.lpp"
{ yylval->sval = "jalali"; return token::CALENDAR; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 264 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 265 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 266 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 267 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 268 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 269 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 270 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 271 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 272 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 273 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 274 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 275 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 277 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 278 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 279 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 280 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 281 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 282 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 283 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 285 "holidayscannerplan.lpp"
{ driver.error( *yylloc, QString("Holiday Scanner Plan: Invalid Character: %1").arg( yytext ) ); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 287 "holidayscannerplan.lpp"
ECHO;
	YY_BREAK
#line 2714 "holidayscannerplan.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 935 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 935 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 934);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 287 "holidayscannerplan.lpp"



// Skeleton says is easier to implement here to have access to yy variables.

void KHolidays::HolidayParserDriverPlan::scannerInitialise()
{
    yy_flex_debug = m_traceScanning;
    if ( !( yyin = fopen( m_filePath.toLocal8Bit(), "r" ) ) ) {
        error( "cannot open " + m_filePath );
    }
}

void KHolidays::HolidayParserDriverPlan::scannerReset()
{
    //TODO rest counters???
    rewind( yyin );
}

void KHolidays::HolidayParserDriverPlan::scannerTerminate()
{
    fclose( yyin );
}

