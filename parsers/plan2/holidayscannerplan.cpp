#line 2 "holidayscannerplan.cpp"

#line 4 "holidayscannerplan.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 201
#define YY_END_OF_BUFFER 202
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[943] =
    {   0,
        0,    0,  202,  200,    3,    4,    5,  200,  200,    5,
      200,   10,   10,   10,   10,   10,   10,   41,  200,   42,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,    5,    3,    4,   38,    0,   11,
        0,    1,   43,   10,    0,    0,    0,    0,    0,   39,
       37,   40,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  129,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   18,   17,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   15,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   16,    0,
        0,    0,    0,    0,    0,    0,   44,    0,    2,   45,
       46,   47,   48,   49,    0,    0,    0,    0,   51,    0,
      115,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   13,    0,  190,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   61,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   29,  113,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  102,    0,
        0,    0,    0,  184,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  188,  124,
        0,    0,    0,    0,    0,    0,  189,    0,    0,    0,
        0,   32,    0,    0,    0,    0,    0,   34,   14,    0,
        0,    0,    0,  117,  130,   87,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  126,    0,    0,
        0,   63,    0,    0,   62,    0,    0,    0,    0,    0,
        0,    0,   50,    0,    0,    0,    0,  171,    0,    0,
        0,  187,    0,    0,    0,    0,    0,    0,    0,    0,
        8,    0,    0,   52,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   19,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  107,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   81,
        0,    0,    0,    0,    0,    0,    0,    0,   22,    0,
        0,    0,    0,    0,  131,   54,    0,   60,    0,    0,
        0,    0,    0,    0,   28,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   12,    0,    0,   49,
       45,    0,    0,    0,   30,    0,    0,  108,  114,    0,

        0,  100,    0,  140,    0,    0,    0,    0,    0,  197,
        0,    0,    0,   80,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   59,    0,    0,    0,   20,    0,    0,
        0,    0,    0,  125,    0,    0,    0,    0,    0,   86,
       78,    0,    0,    0,    0,  170,    0,    0,    0,    0,
        0,   94,   93,    0,    0,  147,    0,    0,  142,    0,
        0,    0,  111,    0,    0,    0,    0,    0,    0,    0,
       27,    0,  123,  127,   21,    0,    0,    0,    0,  128,
        0,  122,   47,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   35,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  132,    0,    0,  167,   64,  191,   53,    0,
        0,    0,    0,   76,    0,    0,    0,    0,   24,  192,
        0,    0,    0,   48,   73,  106,    0,    0,   79,  118,
        0,    0,  180,    0,   56,    0,    0,  168,    0,  121,
        0,    0,    0,   26,    0,    0,    0,    0,   82,    0,
       88,    0,   69,  185,    0,  109,    0,    0,    0,    0,
        0,    0,    0,   25,    0,    0,   90,    0,    0,    0,
      116,    0,    0,    0,    0,    0,   46,    0,    0,  148,
        0,    0,  198,    0,    0,    0,    0,   75,  101,    0,
       77,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   31,    0,    0,    0,    0,    0,
        0,    0,  164,    0,    0,    0,  161,    6,    0,    0,
        0,    0,    0,    0,    0,    0,  120,    0,   57,    0,
        0,  183,    0,    0,    0,  104,   33,    0,    0,    0,
      105,    0,    0,   66,    0,  110,    0,    0,    0,   85,
       92,  172,    0,    0,    0,    0,  149,  179,    0,    0,
        0,    0,  138,    0,  150,    0,    0,    0,   99,    0,
        0,    0,  119,    0,   70,    0,    0,   36,  103,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   68,    0,  193,    0,

        0,   58,    0,  176,    0,    0,    0,    0,    7,   23,
      112,  174,   98,  141,   67,    0,    0,    0,   84,    0,
       91,    0,    0,  178,   74,    0,  194,    0,  165,  173,
        0,    0,    0,   72,   96,  162,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  135,    0,  133,    0,
        0,    0,  166,  175,    0,    0,   97,  181,   55,    0,
        0,  163,    0,    0,    0,    0,   95,    0,    0,   65,
      186,  177,    0,    0,   71,    0,    0,    0,    0,    0,
        0,    0,  199,    0,  139,  137,    0,  169,    0,    0,
        0,    0,    0,   89,    0,  196,   83,  143,    0,    0,

      151,    0,  159,    0,    0,    0,    0,  158,    0,  134,
        0,    9,    0,    0,    0,  182,    0,  152,    0,  155,
        0,  157,    0,  136,  195,    0,    0,    0,  144,    0,
        0,    0,    0,  145,    0,  154,  153,  156,  160,    0,
      146,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    1,    7,
        7,    7,    7,    1,    7,    7,    7,    9,   10,   11,
       12,   13,   14,    9,    9,    9,    9,   15,    1,   16,
       17,   18,    7,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,    1,   42,   43,
        7,    1,    7,    1,    1,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,    1,
       67,   68,    1,   69,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[946] =
    {   0,
        0,  298,  287, 1944,  281,  277,  261,  259,  241, 1944,
      226,   61,   67,   73,   79,   85,   97,  215,  210,  168,
      141,   94,   86,   99,  191,  197,  128,  160,  169,  155,
      233,  102,  224,  242,   95,  282,   78,  248,  327,  373,
       95,  247,  270,  103,  166,  166,  159, 1944,  150, 1944,
      151, 1944, 1944,  329,   96,  148,  149,  156,  187, 1944,
     1944, 1944,  195,  196,  185,  201,  232,  243,  277,  276,
      282, 1944,  290,  284,  287,  304,  312,  302,  328,  318,
      336,  317,  367,  324,  325,  325,  326,  345,  346,  347,
      374,  365,  383,  384,  366,  380,  377,  387,  375,  385,

      418,  386, 1944,  396,  423,  414,  419,  428,  416,  420,
      442,  417,  425,  441,  459,  457,  457,  460,  442,  459,
      471,  463,  470,  464, 1944,  483,  511,  505,  487,  468,
      519,  485,  511,  531,  517,  520,  517,  557,  566,  516,
      560,  552,  563,  574,  586,  596,  575,  546,  570,  576,
      582,  610,  601,  610,  626,  607, 1944,  133, 1944, 1944,
     1944, 1944, 1944, 1944,  608,  605,  619,  624, 1944,  617,
     1944,  631,  613,  623,  630,  629,  649,  652,  653,  652,
      656,  641,  653,  656,  652,  667, 1944,  670,  666,  655,
      672,  665,  665,  681,  675,  669,  666,  673,  673,  675,

      685,  700,  703,  703,  690,  702,  707,  699,  719,  713,
      704,  715,  707,  725,  706,  729,  736,  726,  723,  714,
      725,  736,  742,  745,  751,  740,  745,  757,  766,  746,
      763,  769, 1944,  755,  773,  754,  775,  773,  778,  786,
      786,  792,  793,  787,  799,  790,  799,  789,  801,  801,
      809,  817,  802,  803,  810,  814,  808,  829,  817,  819,
      822,  837,  832,  842,  843,  844, 1944, 1944,  853,  846,
      837,  845,  847,  859,  845,  859,  868,  865,  871,  872,
      873,  863,  876,  863,  880,  868,  867,  872, 1944,  889,
      885,  889,  904, 1944,  900,  892,  906,  895,  896,  903,

      909,  901,  922,  924,  906,  907,  915,  935, 1944,  922,
      914,  926,  929,  939,  935,  936, 1944,  957,  942,  943,
      953, 1944,  964,  966,  950,  962,  952, 1944, 1944,  960,
      956,  974,  971, 1944, 1944, 1944,  963,  966,  958,  983,
      966,  980,  971,  973,  993,  988,  990,  990,  986, 1005,
      992,  999, 1010,  999,  998, 1012, 1021, 1944, 1011, 1023,
     1024, 1944, 1025, 1022, 1944, 1012, 1023, 1030, 1026, 1033,
     1032, 1022, 1944, 1020, 1033, 1052, 1041, 1944, 1053, 1059,
     1053, 1944, 1055, 1060, 1049, 1051, 1046, 1071, 1072, 1056,
     1944, 1056, 1062, 1944, 1064, 1079, 1080, 1071, 1068, 1083,

     1086, 1080, 1079, 1095, 1089, 1097, 1093, 1109, 1104, 1944,
     1112, 1102, 1096, 1099, 1108, 1121, 1121, 1120, 1124, 1108,
     1105, 1113, 1118, 1119, 1944, 1132, 1137, 1142, 1123, 1151,
     1131, 1135, 1136, 1140, 1147, 1152, 1143, 1166, 1169, 1170,
     1147, 1168, 1154, 1171, 1155, 1165, 1162, 1164, 1175, 1944,
     1183, 1180, 1186, 1188, 1189, 1183, 1192, 1204, 1944, 1200,
     1195, 1203, 1212, 1206, 1206, 1944, 1219, 1944, 1214, 1209,
     1204, 1211, 1221, 1226, 1944, 1209, 1214, 1216, 1234, 1220,
     1239, 1234, 1230, 1235, 1250, 1239, 1944, 1240, 1259, 1944,
     1944, 1253, 1240, 1245, 1944, 1249, 1269, 1944, 1944, 1253,

     1249, 1944, 1272, 1944, 1260, 1266, 1258, 1263, 1277, 1944,
     1274, 1273, 1286, 1944, 1266, 1277, 1292, 1289, 1295, 1295,
     1285, 1301, 1298, 1944, 1293, 1296, 1310, 1944, 1293, 1296,
     1317, 1304, 1318, 1944, 1322, 1320, 1321, 1322, 1323, 1944,
     1944, 1324, 1313, 1336, 1324, 1944, 1326, 1322, 1323, 1352,
     1349, 1944, 1944, 1350, 1346, 1944, 1359, 1343, 1944, 1363,
     1361, 1363, 1944, 1357, 1357, 1358, 1372, 1365, 1370, 1375,
     1944, 1376, 1944, 1944, 1944, 1380, 1360, 1360, 1368, 1944,
     1375, 1944, 1944, 1371, 1386, 1389, 1399, 1404, 1407, 1409,
     1392, 1400, 1944, 1406, 1397, 1408, 1420, 1399, 1422, 1402,

     1406, 1422, 1944, 1402, 1431, 1944, 1944, 1944, 1944, 1421,
     1437, 1422, 1442, 1944, 1420, 1448, 1438, 1453, 1944, 1944,
     1449, 1456, 1443, 1944, 1944, 1944, 1455, 1447, 1944, 1944,
     1453, 1456, 1944, 1447, 1944, 1471, 1453, 1944, 1470, 1944,
     1474, 1469, 1476, 1944, 1461, 1481, 1470, 1465, 1944, 1483,
     1944, 1490, 1944, 1944, 1492, 1944, 1489, 1485, 1496, 1491,
     1507, 1495, 1491, 1944, 1495, 1494, 1944, 1503, 1500, 1507,
     1944, 1521, 1509, 1523, 1507, 1525, 1944, 1525, 1529, 1944,
     1512, 1512, 1944, 1525, 1524, 1525, 1543, 1944, 1944, 1533,
     1944, 1545, 1546, 1557, 1536, 1550, 1540, 1554, 1563, 1566,

     1551, 1564, 1590, 1559, 1944, 1564, 1572, 1574, 1573, 1569,
     1584, 1593, 1944, 1602, 1586, 1597, 1944, 1944, 1590, 1590,
     1606, 1613, 1606, 1593, 1619, 1620, 1944, 1621, 1944, 1622,
     1619, 1944, 1629, 1627, 1619, 1944, 1944, 1623, 1640, 1630,
     1944, 1631, 1631, 1944, 1645, 1944, 1637, 1633, 1649, 1944,
     1944, 1944, 1640, 1638, 1636, 1652, 1944, 1944, 1660, 1640,
     1660, 1662, 1944, 1669, 1944, 1670, 1671, 1655, 1944, 1667,
     1677, 1658, 1944, 1682, 1944, 1680, 1690, 1944, 1944, 1672,
     1686, 1679, 1679, 1693, 1702, 1703, 1699, 1700, 1695, 1702,
     1706, 1696, 1703, 1716, 1720, 1721, 1944, 1714, 1944, 1713,

     1717, 1944, 1718, 1944, 1717, 1726, 1740, 1728, 1944, 1944,
     1944, 1944, 1944, 1944, 1944, 1725, 1747, 1745, 1944, 1737,
     1944, 1752, 1753, 1944, 1944, 1737, 1944, 1740, 1944, 1944,
     1758, 1750, 1760, 1944, 1944, 1944, 1740, 1753, 1766, 1768,
     1763, 1759, 1772, 1775, 1776, 1763, 1944, 1773, 1944, 1779,
     1783, 1792, 1944, 1944, 1780, 1784, 1944, 1944, 1944, 1791,
     1800, 1944, 1783, 1796, 1800, 1792, 1944, 1797, 1809, 1944,
     1944, 1944, 1810, 1806, 1944, 1814, 1813, 1812, 1808, 1810,
     1814, 1811, 1944, 1824, 1944, 1944, 1828, 1944, 1836, 1827,
     1828, 1821, 1841, 1944, 1830, 1944, 1944, 1944, 1837, 1845,

     1944, 1834, 1944, 1854, 1857, 1858, 1855, 1944, 1852, 1944,
     1859, 1944, 1851, 1866, 1869, 1944, 1862, 1944, 1864, 1944,
     1864, 1944, 1872, 1944, 1944, 1880, 1870, 1886, 1944, 1887,
     1877, 1874, 1882, 1944, 1885, 1944, 1944, 1944, 1944, 1891,
     1944, 1944,  102,  101,   99
    } ;

static yyconst flex_int16_t yy_def[946] =
    {   0,
      942,    1,  942,  942,  942,  942,  942,  943,  944,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  945,  942,  942,  942,  943,  942,
      944,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  945,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,    0,  942,  942,  942
    } ;

static yyconst flex_int16_t yy_nxt[2014] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   10,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,    4,   41,
       42,   43,    4,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,    4,   41,   42,   43,    4,   44,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,  158,

      133,   51,   49,   55,   56,   54,   54,   54,   54,   54,
       54,   79,   74,  151,   57,  124,   75,   82,   80,   76,
      113,   83,   58,   77,  114,  133,  125,   81,   55,   56,
      126,   84,   78,  160,   59,  159,   79,   74,  151,   57,
      124,   75,   82,   80,   76,  113,   83,   58,   77,  114,
       97,  125,   81,   52,   50,  126,   84,   78,  160,   59,
       63,   47,   64,   98,   65,   66,   99,   46,  159,  161,
      162,  157,   67,  106,   68,   97,   69,   70,  100,   71,
       72,  163,  101,   73,   62,   63,  102,   64,   98,   65,
       66,   99,  103,  107,  161,  162,  108,   67,  106,   68,

      104,   69,   70,  100,   71,   72,  163,  101,   73,   85,
      105,  102,  164,  165,  166,   92,   86,  103,  107,   93,
       87,  108,  167,   94,   88,  104,   61,   89,   90,   95,
       91,   60,   96,   53,   85,  105,  168,  164,  165,  166,
       92,   86,  115,   52,   93,   87,  116,  167,   94,   88,
      117,  109,   89,   90,   95,   91,  118,   96,  110,  111,
      120,  168,  119,   50,  121,  112,  134,  115,  122,  152,
      135,  116,  153,  169,  123,  117,  109,   48,  170,   47,
      136,  118,   46,  110,  111,  120,  942,  119,  154,  121,
      112,  134,  155,  122,  152,  135,  171,  153,  169,  123,

      127,  172,  156,  170,  128,  136,  173,  129,  174,  175,
      176,  130,   45,  154,  942,  942,  942,  155,  131,  132,
      942,  171,  177,  180,  942,  127,  172,  156,  942,  128,
      178,  173,  129,  174,  175,  176,  130,   54,   54,   54,
       54,   54,   54,  131,  132,  137,  181,  177,  180,  138,
      179,  182,  139,  140,  184,  178,  183,  141,  185,  142,
      189,  190,  942,  191,  192,  143,  942,  193,  942,  194,
      137,  181,  195,  942,  138,  179,  182,  139,  140,  184,
      942,  183,  141,  185,  142,  189,  190,  186,  191,  192,
      143,  144,  193,  187,  194,  145,  196,  195,  146,  147,

      197,  148,  198,  188,  201,  149,  202,  199,  203,  204,
      205,  150,  186,  211,  942,  206,  144,  212,  187,  200,
      145,  196,  207,  146,  147,  197,  148,  198,  188,  201,
      149,  202,  199,  203,  204,  205,  150,  208,  211,  209,
      206,  213,  212,  214,  200,  215,  219,  207,  216,  217,
      218,  220,  221,  942,  210,  224,  225,  942,  942,  227,
      222,  226,  208,  942,  209,  942,  213,  240,  214,  942,
      215,  219,  228,  216,  217,  218,  220,  221,  223,  210,
      224,  225,  234,  229,  227,  222,  226,  230,  236,  241,
      231,  238,  240,  235,  232,  239,  242,  228,  237,  243,

      233,  246,  244,  223,  247,  256,  257,  234,  229,  245,
      942,  261,  230,  236,  241,  231,  238,  942,  235,  232,
      239,  242,  942,  237,  243,  233,  246,  244,  254,  247,
      256,  257,  262,  942,  245,  248,  261,  258,  267,  268,
      269,  255,  249,  250,  259,  942,  251,  252,  270,  253,
      263,  260,  942,  254,  271,  281,  942,  262,  264,  942,
      248,  265,  258,  267,  268,  269,  255,  249,  250,  259,
      266,  251,  252,  270,  253,  263,  260,  272,  282,  271,
      281,  273,  283,  264,  277,  942,  265,  296,  274,  297,
      275,  284,  278,  276,  285,  266,  942,  942,  298,  286,

      942,  279,  272,  282,  287,  280,  273,  283,  299,  277,
      294,  295,  296,  274,  297,  275,  284,  278,  276,  285,
      288,  289,  291,  298,  286,  290,  279,  302,  292,  287,
      280,  300,  301,  299,  293,  294,  295,  308,  303,  309,
      310,  311,  312,  313,  305,  288,  289,  291,  304,  314,
      290,  316,  302,  292,  306,  307,  300,  301,  317,  293,
      318,  319,  308,  303,  309,  310,  311,  312,  313,  305,
      320,  315,  321,  304,  314,  322,  316,  323,  326,  306,
      307,  324,  325,  317,  327,  318,  319,  328,  329,  330,
      331,  332,  333,  334,  335,  320,  315,  321,  336,  337,

      322,  338,  323,  326,  339,  340,  324,  325,  341,  327,
      342,  343,  328,  329,  330,  331,  332,  333,  334,  335,
      344,  345,  346,  336,  337,  347,  338,  348,  349,  339,
      340,  350,  352,  341,  353,  342,  343,  354,  355,  356,
      351,  357,  358,  359,  360,  344,  345,  346,  365,  366,
      347,  367,  348,  349,  363,  361,  350,  352,  364,  353,
      368,  369,  354,  355,  356,  351,  357,  358,  359,  360,
      362,  370,  371,  365,  366,  372,  367,  373,  374,  363,
      361,  375,  379,  364,  376,  368,  369,  380,  377,  381,
      382,  378,  386,  387,  388,  362,  370,  371,  383,  389,

      372,  384,  373,  374,  390,  385,  375,  379,  391,  376,
      392,  393,  380,  377,  381,  382,  378,  386,  387,  388,
      394,  395,  396,  383,  389,  397,  384,  398,  399,  390,
      385,  402,  400,  391,  401,  392,  393,  404,  406,  403,
      407,  408,  405,  409,  410,  394,  395,  396,  411,  412,
      397,  413,  398,  399,  414,  415,  402,  400,  416,  401,
      417,  418,  404,  406,  403,  407,  408,  405,  409,  410,
      419,  420,  421,  411,  412,  422,  413,  423,  424,  414,
      415,  425,  426,  416,  427,  417,  418,  428,  432,  433,
      434,  435,  436,  429,  437,  419,  420,  421,  438,  430,

      422,  439,  423,  424,  440,  441,  425,  426,  431,  427,
      442,  443,  428,  432,  433,  434,  435,  436,  429,  437,
      444,  445,  446,  438,  430,  448,  439,  449,  450,  440,
      441,  451,  452,  431,  453,  442,  443,  454,  455,  447,
      456,  459,  457,  460,  461,  444,  445,  446,  465,  466,
      448,  467,  449,  450,  458,  462,  451,  452,  468,  453,
      469,  470,  454,  455,  447,  456,  459,  457,  460,  461,
      463,  464,  471,  465,  466,  472,  467,  473,  474,  458,
      462,  475,  476,  468,  477,  469,  470,  478,  479,  480,
      481,  482,  483,  484,  485,  463,  464,  471,  486,  487,

      472,  488,  473,  474,  489,  490,  475,  476,  491,  477,
      492,  493,  478,  479,  480,  481,  482,  483,  484,  485,
      494,  495,  496,  486,  487,  497,  488,  498,  499,  489,
      490,  500,  501,  491,  502,  492,  493,  503,  504,  505,
      506,  507,  508,  509,  510,  494,  495,  496,  511,  512,
      497,  513,  498,  499,  514,  515,  500,  501,  516,  502,
      517,  518,  503,  504,  505,  506,  507,  508,  509,  510,
      519,  520,  521,  511,  512,  522,  513,  523,  524,  514,
      515,  525,  526,  516,  527,  517,  518,  528,  529,  530,
      531,  532,  533,  534,  535,  519,  520,  521,  536,  537,

      522,  538,  523,  524,  539,  540,  525,  526,  541,  527,
      542,  543,  528,  529,  530,  531,  532,  533,  534,  535,
      544,  545,  546,  536,  537,  547,  538,  548,  549,  539,
      540,  550,  551,  541,  552,  542,  543,  553,  554,  555,
      556,  557,  558,  559,  560,  544,  545,  546,  561,  562,
      547,  563,  548,  549,  564,  565,  550,  551,  568,  552,
      566,  567,  553,  554,  555,  556,  557,  558,  559,  560,
      569,  570,  571,  561,  562,  572,  563,  573,  574,  564,
      565,  575,  576,  568,  577,  566,  567,  578,  579,  580,
      581,  582,  583,  584,  585,  569,  570,  571,  586,  587,

      572,  588,  573,  574,  589,  590,  575,  576,  591,  577,
      592,  593,  578,  579,  580,  581,  582,  583,  584,  585,
      594,  595,  596,  586,  587,  597,  588,  598,  599,  589,
      590,  602,  603,  591,  600,  592,  593,  604,  601,  605,
      606,  607,  608,  609,  610,  594,  595,  596,  611,  612,
      597,  613,  598,  599,  614,  615,  602,  603,  616,  600,
      617,  618,  604,  601,  605,  606,  607,  608,  609,  610,
      619,  620,  621,  611,  612,  622,  613,  623,  624,  614,
      615,  625,  626,  616,  627,  617,  618,  628,  629,  630,
      631,  632,  633,  634,  635,  619,  620,  621,  636,  637,

      622,  638,  623,  624,  639,  640,  625,  626,  641,  627,
      642,  643,  628,  629,  630,  631,  632,  633,  634,  635,
      644,  645,  646,  636,  637,  647,  638,  648,  649,  639,
      640,  650,  651,  641,  652,  642,  643,  653,  654,  655,
      656,  657,  658,  659,  660,  644,  645,  646,  661,  662,
      647,  663,  648,  649,  664,  665,  650,  651,  666,  652,
      667,  668,  653,  654,  655,  656,  657,  658,  659,  660,
      669,  670,  671,  661,  662,  672,  663,  673,  674,  664,
      665,  675,  676,  666,  677,  667,  668,  678,  679,  680,
      681,  682,  683,  684,  685,  669,  670,  671,  686,  687,

      672,  688,  673,  674,  689,  690,  675,  676,  691,  677,
      694,  692,  678,  679,  680,  681,  682,  683,  684,  685,
      693,  695,  696,  686,  687,  697,  688,  698,  699,  689,
      690,  700,  701,  691,  702,  694,  692,  703,  704,  705,
      706,  707,  708,  712,  709,  693,  695,  696,  710,  713,
      697,  711,  698,  699,  714,  715,  700,  701,  716,  702,
      717,  718,  703,  704,  705,  706,  707,  708,  712,  709,
      719,  720,  721,  710,  713,  722,  711,  723,  724,  714,
      715,  725,  726,  716,  727,  717,  718,  728,  729,  730,
      731,  732,  733,  734,  735,  719,  720,  721,  736,  737,

      722,  738,  723,  724,  739,  740,  725,  726,  741,  727,
      742,  743,  728,  729,  730,  731,  732,  733,  734,  735,
      744,  745,  746,  736,  737,  747,  738,  748,  749,  739,
      740,  750,  751,  741,  752,  742,  743,  753,  754,  755,
      757,  758,  759,  760,  761,  744,  745,  746,  762,  763,
      747,  764,  748,  749,  765,  766,  750,  751,  756,  752,
      767,  768,  753,  754,  755,  757,  758,  759,  760,  761,
      769,  770,  771,  762,  763,  772,  764,  773,  774,  765,
      766,  775,  776,  756,  777,  767,  768,  778,  779,  780,
      786,  942,  942,  942,  787,  769,  770,  771,  788,  789,

      772,  942,  773,  774,  790,  791,  775,  776,  781,  777,
      792,  793,  778,  779,  780,  786,  782,  783,  784,  787,
      794,  795,  796,  788,  789,  797,  785,  798,  799,  790,
      791,  800,  801,  781,  802,  792,  793,  803,  804,  805,
      806,  782,  783,  784,  807,  794,  795,  796,  808,  809,
      797,  785,  798,  799,  810,  811,  800,  801,  812,  802,
      813,  814,  803,  804,  805,  806,  815,  816,  817,  807,
      818,  819,  820,  808,  809,  821,  822,  823,  824,  810,
      811,  825,  826,  812,  827,  813,  814,  828,  829,  830,
      831,  815,  816,  817,  832,  818,  819,  820,  833,  834,

      821,  822,  823,  824,  835,  836,  825,  826,  837,  827,
      838,  839,  828,  829,  830,  831,  841,  842,  843,  832,
      844,  840,  845,  833,  834,  846,  847,  848,  849,  835,
      836,  850,  851,  837,  852,  838,  839,  853,  854,  855,
      856,  841,  842,  843,  857,  844,  840,  845,  858,  859,
      846,  847,  848,  849,  860,  861,  850,  851,  862,  852,
      863,  864,  853,  854,  855,  856,  865,  866,  867,  857,
      868,  869,  870,  858,  859,  871,  872,  873,  874,  860,
      861,  875,  876,  862,  877,  863,  864,  878,  879,  880,
      881,  865,  866,  867,  882,  868,  869,  870,  883,  884,

      871,  872,  873,  874,  885,  886,  875,  876,  887,  877,
      888,  889,  878,  879,  880,  881,  890,  891,  892,  882,
      894,  895,  896,  883,  884,  897,  898,  899,  900,  885,
      886,  901,  902,  887,  903,  888,  889,  893,  904,  905,
      906,  890,  891,  892,  907,  894,  895,  896,  908,  909,
      897,  898,  899,  900,  910,  911,  901,  902,  912,  903,
      913,  914,  893,  904,  905,  906,  915,  916,  917,  907,
      918,  919,  920,  908,  909,  921,  922,  923,  924,  910,
      911,  925,  926,  912,  927,  913,  914,  928,  929,  930,
      931,  915,  916,  917,  932,  918,  919,  920,  933,  934,

      921,  922,  923,  924,  935,  936,  925,  926,  937,  927,
      938,  939,  928,  929,  930,  931,  940,  941,  942,  932,
      942,  942,  942,  933,  934,  942,  942,  942,  942,  935,
      936,  942,  942,  937,  942,  938,  939,  942,  942,  942,
      942,  940,  941,    3,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942
    } ;

static yyconst flex_int16_t yy_chk[2014] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   12,
       12,   12,   12,   12,   12,   13,   13,   13,   13,   13,
       13,   14,   14,   14,   14,   14,   14,   15,   15,   15,
       15,   15,   15,   16,   16,   16,   16,   16,   16,  945,

       37,  944,  943,   13,   14,   17,   17,   17,   17,   17,
       17,   23,   22,   41,   15,   35,   22,   24,   23,   22,
       32,   24,   16,   22,   32,   37,   35,   23,   13,   14,
       35,   24,   22,   55,   17,  158,   23,   22,   41,   15,
       35,   22,   24,   23,   22,   32,   24,   16,   22,   32,
       27,   35,   23,   51,   49,   35,   24,   22,   55,   17,
       21,   47,   21,   27,   21,   21,   27,   46,   45,   56,
       57,   44,   21,   30,   21,   27,   21,   21,   28,   21,
       21,   58,   28,   21,   20,   21,   28,   21,   27,   21,
       21,   27,   29,   30,   56,   57,   30,   21,   30,   21,

       29,   21,   21,   28,   21,   21,   58,   28,   21,   25,
       29,   28,   59,   63,   64,   26,   25,   29,   30,   26,
       25,   30,   65,   26,   25,   29,   19,   25,   25,   26,
       25,   18,   26,   11,   25,   29,   66,   59,   63,   64,
       26,   25,   33,    9,   26,   25,   33,   65,   26,   25,
       33,   31,   25,   25,   26,   25,   33,   26,   31,   31,
       34,   66,   33,    8,   34,   31,   38,   33,   34,   42,
       38,   33,   42,   67,   34,   33,   31,    7,   68,    6,
       38,   33,    5,   31,   31,   34,    3,   33,   43,   34,
       31,   38,   43,   34,   42,   38,   69,   42,   67,   34,

       36,   70,   43,   68,   36,   38,   71,   36,   73,   74,
       75,   36,    2,   43,    0,    0,    0,   43,   36,   36,
        0,   69,   76,   78,    0,   36,   70,   43,    0,   36,
       77,   71,   36,   73,   74,   75,   36,   54,   54,   54,
       54,   54,   54,   36,   36,   39,   79,   76,   78,   39,
       77,   80,   39,   39,   81,   77,   80,   39,   82,   39,
       84,   85,    0,   86,   87,   39,    0,   88,    0,   89,
       39,   79,   90,    0,   39,   77,   80,   39,   39,   81,
        0,   80,   39,   82,   39,   84,   85,   83,   86,   87,
       39,   40,   88,   83,   89,   40,   91,   90,   40,   40,

       92,   40,   93,   83,   95,   40,   96,   94,   97,   98,
       99,   40,   83,  102,    0,  100,   40,  104,   83,   94,
       40,   91,  100,   40,   40,   92,   40,   93,   83,   95,
       40,   96,   94,   97,   98,   99,   40,  101,  102,  101,
      100,  105,  104,  106,   94,  106,  108,  100,  107,  107,
      107,  109,  110,    0,  101,  112,  113,    0,    0,  114,
      111,  113,  101,    0,  101,    0,  105,  119,  106,    0,
      106,  108,  114,  107,  107,  107,  109,  110,  111,  101,
      112,  113,  116,  115,  114,  111,  113,  115,  117,  120,
      115,  118,  119,  116,  115,  118,  121,  114,  117,  122,

      115,  124,  123,  111,  126,  129,  130,  116,  115,  123,
        0,  132,  115,  117,  120,  115,  118,    0,  116,  115,
      118,  121,    0,  117,  122,  115,  124,  123,  128,  126,
      129,  130,  133,    0,  123,  127,  132,  131,  135,  136,
      137,  128,  127,  127,  131,    0,  127,  127,  137,  127,
      134,  131,    0,  128,  137,  140,    0,  133,  134,    0,
      127,  134,  131,  135,  136,  137,  128,  127,  127,  131,
      134,  127,  127,  137,  127,  134,  131,  138,  141,  137,
      140,  138,  142,  134,  139,    0,  134,  148,  138,  149,
      138,  143,  139,  138,  143,  134,    0,    0,  150,  144,

        0,  139,  138,  141,  144,  139,  138,  142,  151,  139,
      147,  147,  148,  138,  149,  138,  143,  139,  138,  143,
      145,  145,  146,  150,  144,  145,  139,  153,  146,  144,
      139,  152,  152,  151,  146,  147,  147,  156,  154,  165,
      166,  167,  168,  170,  155,  145,  145,  146,  154,  172,
      145,  173,  153,  146,  155,  155,  152,  152,  174,  146,
      175,  176,  156,  154,  165,  166,  167,  168,  170,  155,
      177,  172,  178,  154,  172,  179,  173,  180,  182,  155,
      155,  181,  181,  174,  183,  175,  176,  184,  185,  186,
      188,  189,  190,  191,  192,  177,  172,  178,  193,  194,

      179,  195,  180,  182,  196,  197,  181,  181,  198,  183,
      199,  200,  184,  185,  186,  188,  189,  190,  191,  192,
      201,  202,  203,  193,  194,  204,  195,  204,  205,  196,
      197,  206,  207,  198,  208,  199,  200,  209,  210,  211,
      206,  212,  213,  214,  215,  201,  202,  203,  218,  219,
      204,  220,  204,  205,  217,  216,  206,  207,  217,  208,
      221,  222,  209,  210,  211,  206,  212,  213,  214,  215,
      216,  223,  224,  218,  219,  225,  220,  226,  227,  217,
      216,  228,  230,  217,  229,  221,  222,  231,  229,  232,
      234,  229,  236,  237,  238,  216,  223,  224,  235,  239,

      225,  235,  226,  227,  240,  235,  228,  230,  241,  229,
      242,  243,  231,  229,  232,  234,  229,  236,  237,  238,
      244,  245,  246,  235,  239,  247,  235,  248,  249,  240,
      235,  251,  250,  241,  250,  242,  243,  252,  253,  251,
      254,  255,  252,  256,  257,  244,  245,  246,  258,  259,
      247,  260,  248,  249,  261,  262,  251,  250,  263,  250,
      264,  265,  252,  253,  251,  254,  255,  252,  256,  257,
      266,  269,  270,  258,  259,  271,  260,  272,  273,  261,
      262,  274,  275,  263,  276,  264,  265,  277,  278,  279,
      280,  281,  282,  277,  283,  266,  269,  270,  284,  277,

      271,  285,  272,  273,  286,  287,  274,  275,  277,  276,
      288,  290,  277,  278,  279,  280,  281,  282,  277,  283,
      291,  292,  293,  284,  277,  295,  285,  296,  297,  286,
      287,  298,  299,  277,  300,  288,  290,  301,  302,  293,
      303,  305,  304,  306,  307,  291,  292,  293,  310,  311,
      295,  312,  296,  297,  304,  308,  298,  299,  313,  300,
      314,  315,  301,  302,  293,  303,  305,  304,  306,  307,
      308,  308,  316,  310,  311,  318,  312,  319,  320,  304,
      308,  321,  323,  313,  324,  314,  315,  325,  326,  327,
      330,  331,  332,  333,  337,  308,  308,  316,  338,  339,

      318,  340,  319,  320,  341,  342,  321,  323,  343,  324,
      344,  345,  325,  326,  327,  330,  331,  332,  333,  337,
      346,  347,  348,  338,  339,  349,  340,  350,  351,  341,
      342,  352,  353,  343,  354,  344,  345,  355,  356,  357,
      359,  360,  361,  363,  364,  346,  347,  348,  366,  367,
      349,  368,  350,  351,  369,  370,  352,  353,  371,  354,
      372,  374,  355,  356,  357,  359,  360,  361,  363,  364,
      375,  376,  377,  366,  367,  379,  368,  380,  381,  369,
      370,  383,  384,  371,  385,  372,  374,  386,  387,  388,
      389,  390,  392,  393,  395,  375,  376,  377,  396,  397,

      379,  398,  380,  381,  399,  400,  383,  384,  401,  385,
      402,  403,  386,  387,  388,  389,  390,  392,  393,  395,
      404,  405,  406,  396,  397,  407,  398,  408,  409,  399,
      400,  411,  412,  401,  413,  402,  403,  414,  415,  416,
      417,  418,  419,  420,  421,  404,  405,  406,  422,  423,
      407,  424,  408,  409,  426,  427,  411,  412,  429,  413,
      428,  428,  414,  415,  416,  417,  418,  419,  420,  421,
      430,  431,  432,  422,  423,  433,  424,  434,  435,  426,
      427,  436,  437,  429,  438,  428,  428,  439,  440,  441,
      442,  443,  444,  445,  446,  430,  431,  432,  447,  448,

      433,  449,  434,  435,  451,  452,  436,  437,  453,  438,
      454,  455,  439,  440,  441,  442,  443,  444,  445,  446,
      456,  457,  458,  447,  448,  460,  449,  461,  462,  451,
      452,  464,  465,  453,  463,  454,  455,  467,  463,  469,
      470,  471,  472,  473,  474,  456,  457,  458,  476,  477,
      460,  478,  461,  462,  479,  480,  464,  465,  481,  463,
      482,  483,  467,  463,  469,  470,  471,  472,  473,  474,
      484,  485,  486,  476,  477,  488,  478,  489,  492,  479,
      480,  493,  494,  481,  496,  482,  483,  497,  500,  501,
      503,  505,  506,  507,  508,  484,  485,  486,  509,  511,

      488,  512,  489,  492,  513,  515,  493,  494,  516,  496,
      517,  518,  497,  500,  501,  503,  505,  506,  507,  508,
      519,  520,  521,  509,  511,  522,  512,  523,  525,  513,
      515,  526,  527,  516,  529,  517,  518,  530,  531,  532,
      533,  535,  536,  537,  538,  519,  520,  521,  539,  542,
      522,  543,  523,  525,  544,  545,  526,  527,  547,  529,
      548,  549,  530,  531,  532,  533,  535,  536,  537,  538,
      550,  551,  554,  539,  542,  555,  543,  557,  558,  544,
      545,  560,  561,  547,  562,  548,  549,  564,  565,  566,
      567,  568,  569,  570,  572,  550,  551,  554,  576,  577,

      555,  578,  557,  558,  579,  581,  560,  561,  584,  562,
      586,  585,  564,  565,  566,  567,  568,  569,  570,  572,
      585,  587,  588,  576,  577,  589,  578,  590,  591,  579,
      581,  592,  594,  584,  595,  586,  585,  596,  597,  598,
      599,  600,  601,  604,  602,  585,  587,  588,  602,  605,
      589,  602,  590,  591,  610,  611,  592,  594,  612,  595,
      613,  615,  596,  597,  598,  599,  600,  601,  604,  602,
      616,  617,  618,  602,  605,  621,  602,  622,  623,  610,
      611,  627,  628,  612,  631,  613,  615,  632,  634,  636,
      637,  639,  641,  642,  643,  616,  617,  618,  645,  646,

      621,  647,  622,  623,  648,  650,  627,  628,  652,  631,
      655,  657,  632,  634,  636,  637,  639,  641,  642,  643,
      658,  659,  660,  645,  646,  661,  647,  662,  663,  648,
      650,  665,  666,  652,  668,  655,  657,  669,  670,  672,
      673,  674,  675,  676,  678,  658,  659,  660,  679,  681,
      661,  682,  662,  663,  684,  685,  665,  666,  672,  668,
      686,  687,  669,  670,  672,  673,  674,  675,  676,  678,
      690,  692,  693,  679,  681,  694,  682,  695,  696,  684,
      685,  697,  698,  672,  699,  686,  687,  700,  701,  702,
      704,    0,    0,    0,  706,  690,  692,  693,  707,  708,

      694,    0,  695,  696,  709,  710,  697,  698,  703,  699,
      711,  712,  700,  701,  702,  704,  703,  703,  703,  706,
      714,  715,  716,  707,  708,  719,  703,  720,  721,  709,
      710,  722,  723,  703,  724,  711,  712,  725,  726,  728,
      730,  703,  703,  703,  731,  714,  715,  716,  733,  734,
      719,  703,  720,  721,  735,  738,  722,  723,  739,  724,
      740,  742,  725,  726,  728,  730,  743,  745,  747,  731,
      748,  749,  753,  733,  734,  754,  755,  756,  759,  735,
      738,  760,  761,  739,  762,  740,  742,  764,  766,  767,
      768,  743,  745,  747,  770,  748,  749,  753,  771,  772,

      754,  755,  756,  759,  774,  776,  760,  761,  777,  762,
      780,  781,  764,  766,  767,  768,  782,  783,  784,  770,
      785,  781,  786,  771,  772,  787,  788,  789,  790,  774,
      776,  791,  792,  777,  793,  780,  781,  794,  795,  796,
      798,  782,  783,  784,  800,  785,  781,  786,  801,  803,
      787,  788,  789,  790,  805,  806,  791,  792,  807,  793,
      808,  816,  794,  795,  796,  798,  817,  818,  820,  800,
      822,  823,  826,  801,  803,  828,  831,  832,  833,  805,
      806,  837,  838,  807,  839,  808,  816,  840,  841,  842,
      843,  817,  818,  820,  844,  822,  823,  826,  845,  846,

      828,  831,  832,  833,  848,  850,  837,  838,  851,  839,
      852,  855,  840,  841,  842,  843,  856,  860,  861,  844,
      863,  864,  865,  845,  846,  866,  868,  869,  873,  848,
      850,  874,  876,  851,  877,  852,  855,  861,  878,  879,
      880,  856,  860,  861,  881,  863,  864,  865,  882,  884,
      866,  868,  869,  873,  887,  889,  874,  876,  890,  877,
      891,  892,  861,  878,  879,  880,  893,  895,  899,  881,
      900,  902,  904,  882,  884,  905,  906,  907,  909,  887,
      889,  911,  913,  890,  914,  891,  892,  915,  917,  919,
      921,  893,  895,  899,  923,  900,  902,  904,  926,  927,

      905,  906,  907,  909,  928,  930,  911,  913,  931,  914,
      932,  933,  915,  917,  919,  921,  935,  940,    0,  923,
        0,    0,    0,  926,  927,    0,    0,    0,    0,  928,
      930,    0,    0,  931,    0,  932,  933,    0,    0,    0,
        0,  935,  940,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[201] =
    {   0,
       57,   58,   59,   60,   61,   63,   64,   65,   66,   68,
       70,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   87,   88,   89,   91,   92,   93,
       94,   95,   96,   97,   98,   99,  101,  102,  103,  104,
      105,  106,  107,  108,  110,  111,  112,  113,  114,  115,
      116,  117,  119,  120,  122,  123,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  138,  139,
      140,  141,  142,  143,  144,  146,  148,  149,  150,  151,
      152,  153,  154,  155,  156,  157,  158,  159,  160,  162,
      163,  164,  165,  166,  167,  168,  170,  172,  173,  174,

      175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
      186,  187,  188,  189,  190,  191,  192,  194,  196,  197,
      198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
      208,  209,  211,  212,  213,  214,  215,  216,  217,  219,
      221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
      231,  232,  234,  235,  236,  237,  238,  239,  240,  242,
      244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  255,  257,  258,  259,  260,  261,  262,  263,  265,
      267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
      277,  278,  280,  281,  282,  283,  284,  285,  286,  288

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "holidayscannerplan.lpp"
/*
    Original version from plan by Thomas Driemeyer <thomas@bitrot.de>

    Adapted for use in KOrganizer by
        Preston Brown <pbrown@kde.org> and
        Reinhold Kainhofer <reinhold@kainhofer.com>

    Major rewrite using Bison C++ skeleton:
        Copyright 2010 John Layt <john@layt.net>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to the
    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/
#line 28 "holidayscannerplan.lpp"
# include <cstdlib>
# include <errno.h>
# include <limits.h>
# include <string>
# include "holidayparserdriverplan_p.h"
# include "holidayparserplan.hpp"

# undef yywrap
# define yywrap() 1

#define yyterminate() return token::END
#line 47 "holidayscannerplan.lpp"
# define YY_USER_ACTION  yylloc->columns( yyleng );
#line 1358 "holidayscannerplan.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 50 "holidayscannerplan.lpp"



    yylloc->step();
    typedef KHolidays::HolidayParserPlan::token token;


#line 1609 "holidayscannerplan.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 943 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 942 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 201 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 201 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 202 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 57 "holidayscannerplan.lpp"
{ yylloc->lines( yyleng ); yylloc->step(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 58 "holidayscannerplan.lpp"
{ yylloc->lines( yyleng ); yylloc->step(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 59 "holidayscannerplan.lpp"
{ yylloc->step(); }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 60 "holidayscannerplan.lpp"
{ yylloc->lines( yyleng ); yylloc->step(); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 61 "holidayscannerplan.lpp"
{ return KHolidays::HolidayParserPlan::token_type( *yytext ); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "holidayscannerplan.lpp"
{ return token::COUNTRY; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "holidayscannerplan.lpp"
{ return token::LANGUAGE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "holidayscannerplan.lpp"
{ return token::NAME; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "holidayscannerplan.lpp"
{ return token::DESCRIPTION; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 68 "holidayscannerplan.lpp"
{ yylval->ival = atoi( yytext ); return token::NUMBER; }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 70 "holidayscannerplan.lpp"
{ yylval->sval = strdup( yytext + 1 );
                      yylval->sval[ strlen( yylval->sval ) - 1 ] = 0;
                      return token::STRING; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 74 "holidayscannerplan.lpp"
;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 75 "holidayscannerplan.lpp"
;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 76 "holidayscannerplan.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 77 "holidayscannerplan.lpp"
;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 78 "holidayscannerplan.lpp"
;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 79 "holidayscannerplan.lpp"
{ return token::INOP; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 80 "holidayscannerplan.lpp"
{ return token::IF; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 81 "holidayscannerplan.lpp"
{ return token::PLUS; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 82 "holidayscannerplan.lpp"
{ return token::MINUS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 83 "holidayscannerplan.lpp"
{ return token::SMALL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 84 "holidayscannerplan.lpp"
{ return token::YEAR; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 85 "holidayscannerplan.lpp"
{ return token::LEAPYEAR; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 86 "holidayscannerplan.lpp"
{ return token::EASTER; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 87 "holidayscannerplan.lpp"
{ return token::PASCHA; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 88 "holidayscannerplan.lpp"
{ return token::LENGTH; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 89 "holidayscannerplan.lpp"
{ return token::SHIFT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 91 "holidayscannerplan.lpp"
{ yylval->ival = 1; return token::COLOR; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 92 "holidayscannerplan.lpp"
{ yylval->ival = 2; return token::COLOR; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 93 "holidayscannerplan.lpp"
{ yylval->ival = 3; return token::COLOR; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 94 "holidayscannerplan.lpp"
{ yylval->ival = 4; return token::COLOR; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 95 "holidayscannerplan.lpp"
{ yylval->ival = 5; return token::COLOR; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 96 "holidayscannerplan.lpp"
{ yylval->ival = 6; return token::COLOR; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 97 "holidayscannerplan.lpp"
{ yylval->ival = 7; return token::COLOR; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 98 "holidayscannerplan.lpp"
{ yylval->ival = 8; return token::COLOR; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 99 "holidayscannerplan.lpp"
{ yylval->ival = 9; return token::COLOR; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 101 "holidayscannerplan.lpp"
{ return token::EQ; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 102 "holidayscannerplan.lpp"
{ return token::NE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 103 "holidayscannerplan.lpp"
{ return token::LE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 104 "holidayscannerplan.lpp"
{ return token::GE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 105 "holidayscannerplan.lpp"
{ return token::LT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 106 "holidayscannerplan.lpp"
{ return token::GT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 107 "holidayscannerplan.lpp"
{ return token::AND;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 108 "holidayscannerplan.lpp"
{ return token::OR; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 110 "holidayscannerplan.lpp"
{ yylval->ival =      1; return token::NUMBER; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 111 "holidayscannerplan.lpp"
{ yylval->ival =      2; return token::NUMBER; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 112 "holidayscannerplan.lpp"
{ yylval->ival =      3; return token::NUMBER; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 113 "holidayscannerplan.lpp"
{ yylval->ival =      4; return token::NUMBER; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 114 "holidayscannerplan.lpp"
{ yylval->ival =      5; return token::NUMBER; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 115 "holidayscannerplan.lpp"
{ yylval->ival =  99999; return token::NUMBER; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 116 "holidayscannerplan.lpp"
{ yylval->ival = -99999; return token::NUMBER; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 117 "holidayscannerplan.lpp"
{ yylval->ival =      0; return token::NUMBER; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 119 "holidayscannerplan.lpp"
{ yylval->ival =  -1; return token::NUMBER; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 120 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::NUMBER; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 122 "holidayscannerplan.lpp"
{ yylval->sval = "gregorian"; return token::CALENDAR; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 123 "holidayscannerplan.lpp"
{ yylval->sval = "julian"; return token::CALENDAR; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 125 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 126 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 127 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 128 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 129 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 130 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 131 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 132 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 133 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 134 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 135 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 136 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 138 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 139 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 140 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 141 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 142 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 143 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 144 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 146 "holidayscannerplan.lpp"
{ yylval->sval = "coptic"; return token::CALENDAR; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 148 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 149 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 150 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 151 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 152 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 153 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 154 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 155 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 156 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 157 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 158 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 159 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 160 "holidayscannerplan.lpp"
{ yylval->ival =  13; return token::MONTH; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 162 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 163 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 164 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 165 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 166 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 167 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 168 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 170 "holidayscannerplan.lpp"
{ yylval->sval = "ethiopian"; return token::CALENDAR; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 172 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 173 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 174 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 175 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 176 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 177 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 178 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 179 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 180 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 181 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 182 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 183 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 184 "holidayscannerplan.lpp"
{ yylval->ival =  13; return token::MONTH; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 186 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 187 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 188 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 190 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 192 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 194 "holidayscannerplan.lpp"
{ yylval->sval = "hebrew"; return token::CALENDAR; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 196 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 197 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 198 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 199 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 200 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 201 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 202 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 203 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 204 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 205 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 206 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 207 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 208 "holidayscannerplan.lpp"
{ yylval->ival =  13; return token::MONTH; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 209 "holidayscannerplan.lpp"
{ yylval->ival =  14; return token::MONTH; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 211 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 212 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 213 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 214 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 215 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 216 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 217 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 219 "holidayscannerplan.lpp"
{ yylval->sval = "hijri"; return token::CALENDAR; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 221 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 222 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 223 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 224 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 225 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 226 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 227 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 228 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 229 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 230 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 231 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 232 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 234 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 235 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 236 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 237 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 238 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 239 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 240 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 242 "holidayscannerplan.lpp"
{ yylval->sval = "indian-national"; return token::CALENDAR; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 244 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 245 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 246 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 247 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 248 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 249 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 250 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 251 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 252 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 253 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 254 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 255 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 257 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 258 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 259 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 260 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 261 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 262 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 263 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 265 "holidayscannerplan.lpp"
{ yylval->sval = "jalali"; return token::CALENDAR; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 267 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::MONTH; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 268 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::MONTH; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 269 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::MONTH; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 270 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::MONTH; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 271 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::MONTH; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 272 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::MONTH; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 273 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::MONTH; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 274 "holidayscannerplan.lpp"
{ yylval->ival =   8; return token::MONTH; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 275 "holidayscannerplan.lpp"
{ yylval->ival =   9; return token::MONTH; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 276 "holidayscannerplan.lpp"
{ yylval->ival =  10; return token::MONTH; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 277 "holidayscannerplan.lpp"
{ yylval->ival =  11; return token::MONTH; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 278 "holidayscannerplan.lpp"
{ yylval->ival =  12; return token::MONTH; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 280 "holidayscannerplan.lpp"
{ yylval->ival =   1; return token::WDAY; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 281 "holidayscannerplan.lpp"
{ yylval->ival =   2; return token::WDAY; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 282 "holidayscannerplan.lpp"
{ yylval->ival =   3; return token::WDAY; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 283 "holidayscannerplan.lpp"
{ yylval->ival =   4; return token::WDAY; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 284 "holidayscannerplan.lpp"
{ yylval->ival =   5; return token::WDAY; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 285 "holidayscannerplan.lpp"
{ yylval->ival =   6; return token::WDAY; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 286 "holidayscannerplan.lpp"
{ yylval->ival =   7; return token::WDAY; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 288 "holidayscannerplan.lpp"
{ driver.error( *yylloc, QString("Holiday Scanner Plan: Invalid Character: %1").arg( yytext ) ); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 290 "holidayscannerplan.lpp"
ECHO;
	YY_BREAK
#line 2731 "holidayscannerplan.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 943 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 943 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 942);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 290 "holidayscannerplan.lpp"



// Skeleton says is easier to implement here to have access to yy variables.

void KHolidays::HolidayParserDriverPlan::scannerInitialise()
{
    yy_flex_debug = m_traceScanning;
    if ( !( yyin = fopen( m_filePath.toLocal8Bit(), "r" ) ) ) {
        error( "cannot open " + m_filePath );
    }
}

void KHolidays::HolidayParserDriverPlan::scannerReset()
{
    //TODO rest counters???
    rewind( yyin );
}

void KHolidays::HolidayParserDriverPlan::scannerTerminate()
{
    fclose( yyin );
}

