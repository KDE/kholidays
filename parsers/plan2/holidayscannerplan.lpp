/*
    Original version from plan by Thomas Driemeyer <thomas@bitrot.de>

    Adapted for use in KOrganizer by
        Preston Brown <pbrown@kde.org> and
        Reinhold Kainhofer <reinhold@kainhofer.com>

    Major rewrite using Bison C++ skeleton:
        Copyright 2010 John Layt <john@layt.net>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to the
    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

%{
# include <cstdlib>
# include <errno.h>
# include <limits.h>
# include <string>
# include "holidayparserdriverplan_p.h"
# include "holidayparserplan.hpp"

# undef yywrap
# define yywrap() 1

#define yyterminate() return token::END
%}

%option noyywrap
%option nounput
%option batch
%option debug

%{
# define YY_USER_ACTION  yylloc->columns( yyleng );
%}

%%

%{
    yylloc->step();
    typedef KHolidays::HolidayParserPlan::token token;
%}

#.*\n               { yylloc->lines( yyleng ); yylloc->step(); }
^:.*\n              { yylloc->lines( yyleng ); yylloc->step(); }
[ \t\r]+            { yylloc->step(); }
[\n]+               { yylloc->lines( yyleng ); yylloc->step(); }
[-+*/%.!?:()\[\]]   { return KHolidays::HolidayParserPlan::token_type( *yytext ); }

region              { return token::REGION; }
language            { return token::LANGUAGE; }
shortname           { return token::SHORTNAME; }
[0-9]+              { yylval->ival = atoi( yytext ); return token::NUMBER; }

\"[^"]*\"           { yylval->sval = strdup( yytext + 1 );
                      yylval->sval[ strlen( yylval->sval ) - 1 ] = 0;
                      return token::STRING; }

every               ;
day                 ;
days                ;
on                  ;
to                  ;
in                  { return token::INOP; }
if                  { return token::IF; }
plus                { return token::PLUS; }
minus               { return token::MINUS; }
small               { return token::SMALL; }
year                { return token::YEAR; }
leapyear            { return token::LEAPYEAR; }
easter              { return token::EASTER; }
pascha              { return token::PASCHA; }
length              { return token::LENGTH; }
shift               { return token::SHIFT; }

black               { yylval->ival = 1; return token::COLOR; }
red                 { yylval->ival = 2; return token::COLOR; }
green               { yylval->ival = 3; return token::COLOR; }
yellow              { yylval->ival = 4; return token::COLOR; }
blue                { yylval->ival = 5; return token::COLOR; }
magenta             { yylval->ival = 6; return token::COLOR; }
cyan                { yylval->ival = 7; return token::COLOR; }
white               { yylval->ival = 8; return token::COLOR; }
weekend             { yylval->ival = 9; return token::COLOR; }

"=="                { return token::EQ; }
"!="                { return token::NE; }
"<="                { return token::LE; }
">="                { return token::GE; }
"<"                 { return token::LT; }
">"                 { return token::GT; }
"&&"                { return token::AND;}
"||"                { return token::OR; }

1st|first           { yylval->ival =      1; return token::NUMBER; }
2nd|second          { yylval->ival =      2; return token::NUMBER; }
3rd|third           { yylval->ival =      3; return token::NUMBER; }
4th|fourth          { yylval->ival =      4; return token::NUMBER; }
5th|fifth           { yylval->ival =      5; return token::NUMBER; }
last                { yylval->ival =  99999; return token::NUMBER; }
any                 { yylval->ival = -99999; return token::NUMBER; }

before              { yylval->ival =  -1; return token::NUMBER; }
after               { yylval->ival =   1; return token::NUMBER; }

gregorian           { yylval->sval = "gregorian"; return token::CALENDAR; }
julian              { yylval->sval = "julian"; return token::CALENDAR; }

january             { yylval->ival =   1; return token::MONTH; }
february            { yylval->ival =   2; return token::MONTH; }
march               { yylval->ival =   3; return token::MONTH; }
april               { yylval->ival =   4; return token::MONTH; }
may                 { yylval->ival =   5; return token::MONTH; }
june                { yylval->ival =   6; return token::MONTH; }
july                { yylval->ival =   7; return token::MONTH; }
august              { yylval->ival =   8; return token::MONTH; }
september           { yylval->ival =   9; return token::MONTH; }
october             { yylval->ival =  10; return token::MONTH; }
november            { yylval->ival =  11; return token::MONTH; }
december            { yylval->ival =  12; return token::MONTH; }

monday              { yylval->ival =   1; return token::WDAY; }
tuesday             { yylval->ival =   2; return token::WDAY; }
wednesday           { yylval->ival =   3; return token::WDAY; }
thursday            { yylval->ival =   4; return token::WDAY; }
friday              { yylval->ival =   5; return token::WDAY; }
saturday            { yylval->ival =   6; return token::WDAY; }
sunday              { yylval->ival =   7; return token::WDAY; }

coptic              { yylval->sval = "coptic"; return token::CALENDAR; }

thoout              { yylval->ival =   1; return token::MONTH; }
paope               { yylval->ival =   2; return token::MONTH; }
hathor              { yylval->ival =   3; return token::MONTH; }
kiahk               { yylval->ival =   4; return token::MONTH; }
tobe                { yylval->ival =   5; return token::MONTH; }
meshir              { yylval->ival =   6; return token::MONTH; }
paremhotep          { yylval->ival =   7; return token::MONTH; }
parmoute            { yylval->ival =   8; return token::MONTH; }
pashons             { yylval->ival =   9; return token::MONTH; }
paone               { yylval->ival =  10; return token::MONTH; }
epep                { yylval->ival =  11; return token::MONTH; }
mesore              { yylval->ival =  12; return token::MONTH; }
koujinabot          { yylval->ival =  13; return token::MONTH; }

pesnau              { yylval->ival =   1; return token::WDAY; }
pshoment            { yylval->ival =   2; return token::WDAY; }
peftoou             { yylval->ival =   3; return token::WDAY; }
ptiou               { yylval->ival =   4; return token::WDAY; }
psoou               { yylval->ival =   5; return token::WDAY; }
psabbaton           { yylval->ival =   6; return token::WDAY; }
tkyriake            { yylval->ival =   7; return token::WDAY; }

ethiopian           { yylval->sval = "ethiopian"; return token::CALENDAR; }

meskerem            { yylval->ival =   1; return token::MONTH; }
tequemt             { yylval->ival =   2; return token::MONTH; }
hedar               { yylval->ival =   3; return token::MONTH; }
tahsas              { yylval->ival =   4; return token::MONTH; }
ter                 { yylval->ival =   5; return token::MONTH; }
yakatit             { yylval->ival =   6; return token::MONTH; }
magabit             { yylval->ival =   7; return token::MONTH; }
miyazya             { yylval->ival =   8; return token::MONTH; }
genbot              { yylval->ival =   9; return token::MONTH; }
sene                { yylval->ival =  10; return token::MONTH; }
hamle               { yylval->ival =  11; return token::MONTH; }
nehase              { yylval->ival =  12; return token::MONTH; }
pagumen             { yylval->ival =  13; return token::MONTH; }

segno               { yylval->ival =   1; return token::WDAY; }
maksegno            { yylval->ival =   2; return token::WDAY; }
rob                 { yylval->ival =   3; return token::WDAY; }
hamus               { yylval->ival =   4; return token::WDAY; }
arb                 { yylval->ival =   5; return token::WDAY; }
qedame              { yylval->ival =   6; return token::WDAY; }
ehud                { yylval->ival =   7; return token::WDAY; }

hebrew              { yylval->sval = "hebrew"; return token::CALENDAR; }

tishrey             { yylval->ival =   1; return token::MONTH; }
heshvan             { yylval->ival =   2; return token::MONTH; }
kislev              { yylval->ival =   3; return token::MONTH; }
tevet               { yylval->ival =   4; return token::MONTH; }
shvat               { yylval->ival =   5; return token::MONTH; }
adar                { yylval->ival =   6; return token::MONTH; }
nisan               { yylval->ival =   7; return token::MONTH; }
iyar                { yylval->ival =   8; return token::MONTH; }
sivan               { yylval->ival =   9; return token::MONTH; }
tamuz               { yylval->ival =  10; return token::MONTH; }
av                  { yylval->ival =  11; return token::MONTH; }
elul                { yylval->ival =  12; return token::MONTH; }
adari               { yylval->ival =  13; return token::MONTH; }
adarii              { yylval->ival =  14; return token::MONTH; }

yomsheni            { yylval->ival =   1; return token::WDAY; }
yomshlishi          { yylval->ival =   2; return token::WDAY; }
yomrevii            { yylval->ival =   3; return token::WDAY; }
yomchamishi         { yylval->ival =   4; return token::WDAY; }
yomshishi           { yylval->ival =   5; return token::WDAY; }
shabbat             { yylval->ival =   6; return token::WDAY; }
yomrishon           { yylval->ival =   7; return token::WDAY; }

hijri               { yylval->sval = "hijri"; return token::CALENDAR; }

muharram            { yylval->ival =   1; return token::MONTH; }
safar               { yylval->ival =   2; return token::MONTH; }
rabialawal          { yylval->ival =   3; return token::MONTH; }
rabialthaani        { yylval->ival =   4; return token::MONTH; }
jumaadaalawal       { yylval->ival =   5; return token::MONTH; }
jumaadaalthaani     { yylval->ival =   6; return token::MONTH; }
rajab               { yylval->ival =   7; return token::MONTH; }
shaban              { yylval->ival =   8; return token::MONTH; }
ramadan             { yylval->ival =   9; return token::MONTH; }
shawwal             { yylval->ival =  10; return token::MONTH; }
thualqidah          { yylval->ival =  11; return token::MONTH; }
thualhijjah         { yylval->ival =  12; return token::MONTH; }

yaumalithnain       { yylval->ival =   1; return token::WDAY; }
yaualthulatha       { yylval->ival =   2; return token::WDAY; }
yaumalarbia         { yylval->ival =   3; return token::WDAY; }
yaumalkhamees       { yylval->ival =   4; return token::WDAY; }
yaumaljumma         { yylval->ival =   5; return token::WDAY; }
yaumalsabt          { yylval->ival =   6; return token::WDAY; }
yaumalahad          { yylval->ival =   7; return token::WDAY; }

indiannational      { yylval->sval = "indian-national"; return token::CALENDAR; }

chaitra             { yylval->ival =   1; return token::MONTH; }
vaishakh            { yylval->ival =   2; return token::MONTH; }
jyaishtha           { yylval->ival =   3; return token::MONTH; }
ashadha             { yylval->ival =   4; return token::MONTH; }
shravana            { yylval->ival =   5; return token::MONTH; }
bhadrapad           { yylval->ival =   6; return token::MONTH; }
ashwin              { yylval->ival =   7; return token::MONTH; }
kartik              { yylval->ival =   8; return token::MONTH; }
agrahayana          { yylval->ival =   9; return token::MONTH; }
paush               { yylval->ival =  10; return token::MONTH; }
magh                { yylval->ival =  11; return token::MONTH; }
phalgun             { yylval->ival =  12; return token::MONTH; }

somavara            { yylval->ival =   1; return token::WDAY; }
mangalva            { yylval->ival =   2; return token::WDAY; }
budhavara           { yylval->ival =   3; return token::WDAY; }
guruvara            { yylval->ival =   4; return token::WDAY; }
sukravara           { yylval->ival =   5; return token::WDAY; }
sanivara            { yylval->ival =   6; return token::WDAY; }
raviara             { yylval->ival =   7; return token::WDAY; }

jalali              { yylval->sval = "jalali"; return token::CALENDAR; }

farvardin           { yylval->ival =   1; return token::MONTH; }
ordibehesht         { yylval->ival =   2; return token::MONTH; }
khordad             { yylval->ival =   3; return token::MONTH; }
tir                 { yylval->ival =   4; return token::MONTH; }
mordad              { yylval->ival =   5; return token::MONTH; }
shahrivar           { yylval->ival =   6; return token::MONTH; }
mehr                { yylval->ival =   7; return token::MONTH; }
aban                { yylval->ival =   8; return token::MONTH; }
azar                { yylval->ival =   9; return token::MONTH; }
dei                 { yylval->ival =  10; return token::MONTH; }
bahman              { yylval->ival =  11; return token::MONTH; }
esfand              { yylval->ival =  12; return token::MONTH; }

doshanbe            { yylval->ival =   1; return token::WDAY; }
seshanbe            { yylval->ival =   2; return token::WDAY; }
chaharshanbe        { yylval->ival =   3; return token::WDAY; }
panjshanbe          { yylval->ival =   4; return token::WDAY; }
jumee               { yylval->ival =   5; return token::WDAY; }
shanbe              { yylval->ival =   6; return token::WDAY; }
yekshanbe           { yylval->ival =   7; return token::WDAY; }

.                   { driver.error( *yylloc, QString("Holiday Scanner Plan: Invalid Character: %1").arg( yytext ) ); }

%%

// Skeleton says is easier to implement here to have access to yy variables.

void KHolidays::HolidayParserDriverPlan::scannerInitialise()
{
    yy_flex_debug = m_traceScanning;
    if ( !( yyin = fopen( m_filePath.toLocal8Bit(), "r" ) ) ) {
        error( "cannot open " + m_filePath );
    }
}

void KHolidays::HolidayParserDriverPlan::scannerReset()
{
    //TODO rest counters???
    rewind( yyin );
}

void KHolidays::HolidayParserDriverPlan::scannerTerminate()
{
    fclose( yyin );
}
